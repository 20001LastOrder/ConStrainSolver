name,mask,constraint,result
Absolute_Path,True,"The absolute path shall start with the root directory ""/"".","def this_function(s: str) -> bool:
    ''' Check if the absolute path starts with the root directory ""/"". '''
    return s.startswith('/')"
Absolute_Path,True,The absolute path shall not contain any spaces.,"def this_function(s: str) -> bool:
    ''' Check if the absolute path does not contain any spaces. '''
    return ' ' not in s"
Absolute_Path,True,"The absolute path shall not end with ""/"".","def this_function(s: str) -> bool:
    ''' Check if the absolute path does not end with ""/"". '''
    # Check if the string is not empty and does not end with ""/""
    return not s.endswith('/')"
Absolute_Path,True,"The absolute path shall not contain consecutive ""/"" characters.","def this_function(s: str) -> bool:
    ''' Check if the absolute path does not contain consecutive ""/"" characters. '''
    return '//' not in s"
Absolute_Path,False,"The absolute path shall not start with the root directory ""/"".","def this_function(s: str) -> bool:
    ''' Check if the absolute path does not start with the root directory ""/"". '''
    return not s.startswith('/')"
Absolute_Path,False,The absolute path shall contain at least one space.,"def this_function(s: str) -> bool:
    ''' Check if the absolute path contains at least one space. '''
    return ' ' in s"
Absolute_Path,False,"The absolute path shall end with ""/"".","def this_function(s: str) -> bool:
    ''' Check if the absolute path ends with ""/"". '''
    return s.endswith('/')"
Absolute_Path,False,"The absolute path shall contain consecutive ""/"" characters.","def this_function(s: str) -> bool:
    ''' Check if the string contains consecutive ""/"" characters. '''
    return '//' in s"
Date,True,The date shall contain two hyphens.,"def this_function(s: str) -> bool:
    ''' Check if the date string contains exactly two hyphens. '''
    return s.count('-') == 2"
Date,True,"If there is at least one hyphen, the part before the hyphen shall be a number between 0 and 2025.","def this_function(s: str) -> bool:
    ''' Check if there is at least one hyphen, and if so, verify that the part before the hyphen is a number between 0 and 2025. '''
    # Find the position of the first hyphen
    hyphen_index = s.find('-')
    
    # Check if there is at least one hyphen
    if hyphen_index == -1:
        return False
    
    # Extract the part before the first hyphen
    part_before_hyphen = s[:hyphen_index]
    
    # Check if the part before the hyphen is a number
    if not part_before_hyphen.isdigit():
        return False
    
    # Convert the part to an integer
    number = int(part_before_hyphen)
    
    # Check if the number is between 0 and 2025
    return 0 <= number <= 2025"
Date,True,"If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Try to convert the part between the first and second hyphen to an integer
    try:
        number = int(parts[1])
    except ValueError:
        return False
    
    # Check if the number is between 1 and 12
    return 1 <= number <= 12"
Date,True,"If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least three parts
    if len(parts) < 3:
        return False
    
    # Get the part after the second hyphen
    try:
        number = int(parts[2])
    except ValueError:
        return False
    
    # Check if the number is between 1 and 31
    return 1 <= number <= 31"
Date,False,"The date shall contain either no hyphens, one hyphen or more than two hyphens.","def this_function(s: str) -> bool:
    ''' 
    Check if the string contains either no hyphens, exactly one hyphen, 
    or more than two hyphens.
    '''
    hyphen_count = s.count('-')
    return hyphen_count != 2"
Date,False,There must be at least one hyphen and the part before the hyphen shall not be a number between 0 and 2025.,"def this_function(s: str) -> bool:
    # Check if there is at least one hyphen in the string
    if '-' not in s:
        return False
    
    # Split the string at the first hyphen
    parts = s.split('-', 1)
    before_hyphen = parts[0]
    
    # Check if the part before the hyphen is a number between 0 and 2025
    try:
        number = int(before_hyphen)
        if 0 <= number <= 2025:
            return False
    except ValueError:
        # If conversion to integer fails, it means it's not a number, which is fine
        pass
    
    # If both conditions are satisfied, return True
    return True"
Date,False,There must be at least two hyphens and the part after the first hyphen but before the second hyphen shall not be a number between 1 and 12.,"def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Get the part between the first and second hyphen
    middle_part = parts[1]
    
    # Check if the middle part is a number between 1 and 12
    if middle_part.isdigit():
        number = int(middle_part)
        if 1 <= number <= 12:
            return False
    
    # If both conditions are satisfied, return True
    return True"
Date,False,There must be at least two hyphens an d the part after the second hyphen shall not be a number between 1 and 31.,"def this_function(s: str) -> bool:
    ''' Check if there are at least two hyphens and the part after the second hyphen is not a number between 1 and 31.'''
    
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least three parts (meaning at least two hyphens)
    if len(parts) < 3:
        return False
    
    # Get the part after the second hyphen
    part_after_second_hyphen = parts[2]
    
    # Check if this part is a number between 1 and 31
    try:
        number = int(part_after_second_hyphen)
        if 1 <= number <= 31:
            return False
    except ValueError:
        # If it's not a number, that's fine
        pass
    
    # If all checks are passed, return True
    return True"
DNA,True,"The DNA sequence shall only contain letters A, T, C and G.","def this_function(s: str) -> bool:
    ''' Check if the DNA sequence contains only the letters A, T, C, and G. '''
    valid_nucleotides = {'A', 'T', 'C', 'G'}
    return all(char in valid_nucleotides for char in s)"
DNA,True,The length of The DNA sequence shall be at least 10.,"def this_function(s: str) -> bool:
    ''' Check if the length of the DNA sequence is at least 10. '''
    return len(s) >= 10"
DNA,True,The length of The DNA sequence shall be a multiple of three.,"def this_function(s: str) -> bool:
    ''' Check if the length of the DNA sequence is a multiple of three. '''
    return len(s) % 3 == 0"
DNA,True,The DNA sequence shall start with ATG.,"def this_function(s: str) -> bool:
    ''' Check if the DNA sequence starts with ATG. '''
    return s.startswith(""ATG"")"
DNA,True,"The DNA sequence shall end with either TAA, or TAG, or TGA.","def this_function(s: str) -> bool:
    ''' 
    Check if the DNA sequence ends with either TAA, TAG, or TGA.
    
    Parameters:
    s (str): The DNA sequence to check.
    
    Returns:
    bool: True if the sequence ends with one of the specified codons, False otherwise.
    '''
    return s.endswith(('TAA', 'TAG', 'TGA'))"
DNA,False,"The DNA sequence shall contain at least one letter that is neither A, nor T, nor C, nor G.","def this_function(s: str) -> bool:
    ''' 
    Check if the DNA sequence contains at least one letter that is neither A, nor T, nor C, nor G.
    '''
    # Define the set of valid DNA characters
    valid_chars = {'A', 'T', 'C', 'G'}
    
    # Iterate through each character in the string
    for char in s:
        # Check if the character is not in the set of valid characters
        if char not in valid_chars:
            return True
    
    # If no invalid character is found, return False
    return False"
DNA,False,The length of the DNA sequence shall be at most 9.,"def this_function(s: str) -> bool:
    ''' Check if the length of the DNA sequence is at most 9. '''
    return len(s) <= 9"
DNA,False,The length of the DNA sequence shall not a multiple of three.,"def this_function(s: str) -> bool:
    ''' Check if the length of the DNA sequence is not a multiple of three. '''
    return len(s) % 3 != 0"
DNA,False,The DNA sequence shall not start with ATG.,"def this_function(s: str) -> bool:
    ''' Check if the DNA sequence does not start with ATG. '''
    return not s.startswith(""ATG"")"
DNA,False,"The DNA sequence shall not end with TAA, nor with TAG, nor with TGA.","def this_function(s: str) -> bool:
    ''' 
    Check if the DNA sequence does not end with TAA, TAG, or TGA.
    
    Returns True if the sequence does not end with any of these, 
    otherwise returns False.
    '''
    # Check if the string ends with any of the specified sequences
    return not (s.endswith(""TAA"") or s.endswith(""TAG"") or s.endswith(""TGA""))"
Email,True,The email shall not contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the email does not contain a space character. '''
    return ' ' not in s"
Email,True,The email shall not start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email does not start with a @ character. '''
    return not s.startswith('@')"
Email,True,The email shall have exactly one @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email has exactly one @ character. '''
    return s.count('@') == 1"
Email,True,The email shall include a dot character (.) after the @ character but before the end.,"def this_function(s: str) -> bool:
    ''' Check if the email includes a dot character (.) after the @ character but before the end.'''
    try:
        at_index = s.index('@')
        # Check if there is a dot after the @ and before the end
        return '.' in s[at_index+1:-1]
    except ValueError:
        # If '@' is not found, return False
        return False"
Email,True,The final character of the email shall not be a dot character (.).,"def this_function(s: str) -> bool:
    ''' Check if the final character of the email is not a dot character (.). '''
    # Check if the string is not empty and the last character is not a dot
    return len(s) > 0 and s[-1] != '.'"
Email,True,"The email shall not contain the word ""manager"".","def this_function(s: str) -> bool:
    ''' Check if the email does not contain the word ""manager"". '''
    # Convert the string to lowercase to ensure the check is case-insensitive
    s_lower = s.lower()
    # Check if ""manager"" is not in the string
    return ""manager"" not in s_lower"
Email,False,The email shall contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the string contains a space character. '''
    return ' ' in s"
Email,False,The email shall start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if the string starts with a @ character.'''
    return s.startswith('@')"
Email,False,The email shall have either no @ characters or more than one @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email has either no @ characters or more than one @ character. '''
    at_count = s.count('@')
    return at_count != 1"
Email,False,If the email contains a @ character and there shall not include any dot characters (.) after the @ character and before the end.,"def this_function(s: str) -> bool:
    ''' 
    Check if the email contains a @ character and there shall not include any dot characters (.) 
    after the @ character and before the end.
    '''
    # Check if '@' is in the string
    if '@' not in s:
        return False
    
    # Find the position of '@'
    at_index = s.index('@')
    
    # Check if there is a '.' after the '@'
    if '.' in s[at_index + 1:]:
        return False
    
    return True"
Email,False,The final character of the email shall be a dot character (.).,"def this_function(s: str) -> bool:
    ''' Check if the final character of the email is a dot character (.).'''
    return s.endswith('.')"
Email,False,"The email shall contain the word ""manager"".","def this_function(s: str) -> bool:
    ''' Check if the email contains the word ""manager"". '''
    return ""manager"" in s"
Expression,True,"The arithmetic expression shall only contain numbers (0-9) and arithmetic operators (+, -, *, /).","def this_function(s: str) -> bool:
    ''' Check if the arithmetic expression shall only contain numbers (0-9) and arithmetic operators (+, -, *, /).'''
    # Define a regular expression pattern that matches numbers and arithmetic operators
    pattern = r'^[0-9+\-*/\s]+$'
    
    # Use re.fullmatch to check if the entire string matches the pattern
    return bool(re.fullmatch(pattern, s))"
Expression,True,"The arithmetic operators (+, -, *, /) in the arithmetic expression shall not appear consecutively.","def this_function(s: str) -> bool:
    ''' 
    Check if the arithmetic operators (+, -, *, /) in the arithmetic expression 
    do not appear consecutively. Returns True if no consecutive operators are found, 
    otherwise returns False.
    '''
    operators = set('+-*/')
    previous_char = ''
    
    for char in s:
        if char in operators:
            if previous_char in operators:
                return False
            previous_char = char
        else:
            previous_char = ''
    
    return True"
Expression,True,"Except for the minus sign (-), every operator (+, *, /) in the arithmetic expression shall have a number before and after it.","def this_function(s: str) -> bool:
    # Define the operators we are interested in
    operators = {'+', '*', '/'}
    
    # Iterate through the string
    for i, char in enumerate(s):
        if char in operators:
            # Check if there is a number before the operator
            if i == 0 or not s[i-1].isdigit():
                return False
            # Check if there is a number after the operator
            if i == len(s) - 1 or not s[i+1].isdigit():
                return False
    
    # If all operators are correctly placed, return True
    return True"
Expression,True,"The arithmetic expression shall not start with operators from the set {+, *, /}.","def this_function(s: str) -> bool:
    ''' Check if the arithmetic expression does not start with operators from the set {+, *, /}.'''
    if not s:
        return False  # An empty string is considered invalid in this context.
    
    # Check if the first character is one of the forbidden operators
    if s[0] in {'+', '*', '/'}:
        return False
    
    return True"
Expression,False,"The arithmetic expression shall contain at least one character that is neither a number (0-9), nor an arithmetic operator (+, -, *, /).","def this_function(s: str) -> bool:
    ''' 
    Check if the arithmetic expression contains at least one character 
    that is neither a number (0-9), nor an arithmetic operator (+, -, *, /).
    '''
    for char in s:
        if not char.isdigit() and char not in '+-*/':
            return True
    return False"
Expression,False,"The arithmetic expression shall contain consecutive arithmetic operators (+, -, *, /).","def this_function(s: str) -> bool:
    ''' Check if the arithmetic expression contains consecutive arithmetic operators (+, -, *, /). '''
    operators = set('+-*/')
    previous_char = ''
    
    for char in s:
        if char in operators:
            if previous_char in operators:
                return True
            previous_char = char
        else:
            previous_char = ''
    
    return False"
Expression,False,"The arithmetic expression shall contain an operator from the set {+, *, /} that either does not have a number immediately before it or does not have a number immediately after it.","def this_function(s: str) -> bool:
    operators = {'+', '*', '/'}
    length = len(s)
    
    for i, char in enumerate(s):
        if char in operators:
            # Check if there's no number immediately before the operator
            if i == 0 or not s[i-1].isdigit():
                return True
            # Check if there's no number immediately after the operator
            if i == length - 1 or not s[i+1].isdigit():
                return True
    
    return False"
Expression,False,"The arithmetic expression shall start with one of the operators in the set {+, *, /}.","def this_function(s: str) -> bool:
    ''' Check if the arithmetic expression starts with one of the operators in the set {+, *, /}.'''
    if not s:
        return False
    return s[0] in {'+', '*', '/'}"
IBAN,True,The length of the bank number shall be 22.,"def this_function(s: str) -> bool:
    '''Check if the length of the bank number is 22.'''
    return len(s) == 22"
IBAN,True,The bank number shall start with 1210.,"def this_function(s: str) -> bool:
    ''' Check if the bank number starts with 1210. '''
    return s.startswith(""1210"")"
IBAN,True,"The bank number shall have at least 6 characters, and the fifth and sixth characters shall both be 0.","def this_function(s: str) -> bool:
    ''' 
    Check if the bank number has at least 6 characters, 
    and the fifth and sixth characters are both '0'.
    '''
    # Check if the string has at least 6 characters
    if len(s) < 6:
        return False
    
    # Check if the fifth and sixth characters are both '0'
    if s[4] == '0' and s[5] == '0':
        return True
    
    return False"
IBAN,False,The length of the bank account shall not be 22.,"def this_function(s: str) -> bool:
    ''' Check if the length of the bank account is not 22. '''
    return len(s) != 22"
IBAN,False,The bank number shall not start with 1210.,"def this_function(s: str) -> bool:
    ''' Check if the bank number does not start with 1210. '''
    return not s.startswith(""1210"")"
IBAN,False,"The bank number shall either have less than 6 characters, or either the fifth or sixth character shall not be 0.
","def this_function(s: str) -> bool:
    ''' 
    Check if the bank number shall either have less than 6 characters, 
    or either the fifth or sixth character shall not be 0.
    '''
    # Check if the string has less than 6 characters
    if len(s) < 6:
        return True
    
    # Check if either the fifth or sixth character is not '0'
    if s[4] != '0' or s[5] != '0':
        return True
    
    # If neither condition is met, return False
    return False"
ISBN,True,"The ISBN shall only contain numbers (0-9), the letter X, or hyphens.","def this_function(s: str) -> bool:
    ''' Check if the ISBN contains only numbers (0-9), the letter X, or hyphens. '''
    # Define a regular expression pattern that matches only valid characters for an ISBN
    pattern = r'^[0-9X\-]+$'
    
    # Use the fullmatch method to check if the entire string matches the pattern
    return bool(re.fullmatch(pattern, s))"
ISBN,True,The last character of the ISBN shall either be a number (0-9) or the letter X.,"def this_function(s: str) -> bool:
    ''' Check if the last character of the ISBN is either a number (0-9) or the letter X. '''
    if not s:
        return False  # Return False if the string is empty
    last_char = s[-1]
    return last_char.isdigit() or last_char.upper() == 'X'"
ISBN,True,"The ISBN shall contain exactly 10 characters, excluding hyphens.","def this_function(s: str) -> bool:
    ''' Check if the ISBN contains exactly 10 characters, excluding hyphens. '''
    # Remove hyphens from the string
    cleaned_s = s.replace('-', '')
    
    # Check if the cleaned string has exactly 10 characters
    return len(cleaned_s) == 10"
ISBN,True,The ISBN shall not start with a hyphen.,"def this_function(s: str) -> bool:
    ''' Check if the ISBN does not start with a hyphen. '''
    return not s.startswith('-')"
ISBN,True,Hyphens shall not occur consecutively in the ISBN.,"def this_function(s: str) -> bool:
    ''' Check if hyphens do not occur consecutively in the string. '''
    # Iterate through the string, checking each character and the next one
    for i in range(len(s) - 1):
        # If a hyphen is found and the next character is also a hyphen, return False
        if s[i] == '-' and s[i + 1] == '-':
            return False
    # If no consecutive hyphens are found, return True
    return True"
ISBN,True,The ISBN shall contain at most 3 hyphens.,"def this_function(s: str) -> bool:
    ''' Check if the ISBN contains at most 3 hyphens. '''
    hyphen_count = s.count('-')
    return hyphen_count <= 3"
ISBN,False,"The ISBN shall contain at least one character that is neither a number (0-9), nor the letter X, nor a hyphen.","def this_function(s: str) -> bool:
    ''' 
    Check if the ISBN contains at least one character that is neither a number (0-9), 
    nor the letter X, nor a hyphen.
    '''
    for char in s:
        if not (char.isdigit() or char == 'X' or char == '-'):
            return True
    return False"
ISBN,False,"The last character of the ISBN shall be neither a number (0-9), nor the letter X.","def this_function(s: str) -> bool:
    ''' Check if the last character of the string is neither a number (0-9) nor the letter X. '''
    if not s:
        return False  # Return False if the string is empty
    last_char = s[-1]
    return not (last_char.isdigit() or last_char.upper() == 'X')"
ISBN,False,"Without counting hyphens, the ISBN shall contain less than or more than 10 characters.","def this_function(s: str) -> bool:
    '''Check if the ISBN contains exactly 10 characters, excluding hyphens.'''
    # Remove hyphens from the string
    cleaned_isbn = s.replace('-', '')
    # Check if the length of the cleaned ISBN is exactly 10
    return len(cleaned_isbn) == 10"
ISBN,False,The ISBN shall start with a hyphen.,"def this_function(s: str) -> bool:
    ''' Check if the ISBN starts with a hyphen. '''
    return s.startswith('-')"
ISBN,False,The ISBN shall contain two consecutive hyphens.,"def this_function(s: str) -> bool:
    ''' Check if the ISBN contains two consecutive hyphens. '''
    return '--' in s"
ISBN,False,The ISBN shall contain more than 3 hyphens.,"def this_function(s: str) -> bool:
    ''' Check if the ISBN contains more than 3 hyphens. '''
    return s.count('-') > 3"
Name,True,"The name shall only contain letters a-z, letters A-Z and space characters.","def this_function(s: str) -> bool:
    ''' Check if the name contains only letters a-z, A-Z, and space characters. '''
    # Regular expression to match only letters and spaces
    pattern = r'^[a-zA-Z\s]+$'
    return bool(re.match(pattern, s))"
Name,True,The name shall contain at least one space character.,"def this_function(s: str) -> bool:
    ''' Check if the name contains at least one space character. '''
    return ' ' in s"
Name,True,The name shall not end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name does not end with a space character. '''
    # Check if the string ends with a space
    return not s.endswith(' ')"
Name,True,The name shall not start with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name does not start with a space character. '''
    return not s.startswith(' ')"
Name,True,The first character in the name shall be capitalized.,"def this_function(s: str) -> bool:
    ''' Check if the first character in the string is capitalized. '''
    if not s:
        return False  # Return False if the string is empty
    return s[0].isupper()"
Name,True,Any character in the name following a space character shall be capitalized.,"def this_function(s: str) -> bool:
    """"""
    Check if any character in the name following a space character is capitalized.
    
    Args:
    s (str): The input string to check.
    
    Returns:
    bool: True if any character following a space is capitalized, False otherwise.
    """"""
    # Iterate through the string, checking each character
    for i in range(1, len(s)):
        # Check if the current character is capitalized and the previous character is a space
        if s[i - 1] == ' ' and s[i].isupper():
            return True
    return False"
Name,False,"The name shall contain at least one character that is neither a letter a-z, nor a letter A-Z, nor a space.","def this_function(s: str) -> bool:
    ''' 
    Check if the name contains at least one character that is neither a letter a-z, 
    nor a letter A-Z, nor a space.
    '''
    # Regular expression to match any character that is not a letter or space
    pattern = r'[^a-zA-Z ]'
    
    # Search for the pattern in the string
    return bool(re.search(pattern, s))"
Name,False,The name shall contain no space character.,"def this_function(s: str) -> bool:
    ''' Check if the name contains no space character. '''
    return ' ' not in s"
Name,False,The name shall end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the string ends with a space character. '''
    return s.endswith(' ')"
Name,False,The name shall start with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the string starts with a space character. '''
    return s.startswith(' ')"
Name,False,The first character in the name shall not be capitalized.,"def this_function(s: str) -> bool:
    ''' Check if the first character in the string is not capitalized. '''
    if not s:  # Check if the string is empty
        return False
    return s[0] != s[0].upper()"
Name,False,"In the name, there shall be some characters following a space character which are not capitalized.","def this_function(s: str) -> bool:
    """"""
    Check if in the name, there are some characters following a space character
    which are not capitalized.
    
    Args:
    s (str): The input string to check.
    
    Returns:
    bool: True if there is at least one lowercase character following a space,
          False otherwise.
    """"""
    # Iterate through the string, checking each character
    for i in range(1, len(s)):
        # Check if the current character is lowercase and the previous character is a space
        if s[i].islower() and s[i-1] == ' ':
            return True
    return False"
Palindrome,True,The palindrome shall be at least 3 characters long.,"def this_function(s: str) -> bool:
    ''' Check if the string is a palindrome and is at least 3 characters long. '''
    # Check if the string is at least 3 characters long
    if len(s) < 3:
        return False
    
    # Check if the string is a palindrome
    return s == s[::-1]"
Palindrome,True,The palindrome shall be identical to its reverse.,"def this_function(s: str) -> bool:
    ''' Check if the given string is a palindrome. A palindrome is identical to its reverse. '''
    # Remove any spaces and convert the string to lowercase for uniformity
    cleaned_string = ''.join(s.split()).lower()
    # Check if the cleaned string is equal to its reverse
    return cleaned_string == cleaned_string[::-1]"
Palindrome,False,The palindrome shall be at most 2 characters long.,"def this_function(s: str) -> bool:
    ''' Check if the string is a palindrome and at most 2 characters long.'''
    # Check if the string is at most 2 characters long
    if len(s) > 2:
        return False
    
    # Check if the string is a palindrome
    return s == s[::-1]"
Palindrome,False,The palindrome shall not be identical to its reverse.,"def this_function(s: str) -> bool:
    ''' Check if the string is a palindrome but not identical to its reverse.'''
    # A palindrome is always identical to its reverse, so this condition is impossible.
    # Therefore, the function should always return False for any non-empty string.
    return False"
Parentheses,True,The parentheses string shall be at least 10 characters long.,"def this_function(s: str) -> bool:
    '''Check if the parentheses string is at least 10 characters long.'''
    return len(s) >= 10"
Parentheses,True,The parentheses string shall only contains ( and ) characters.,"def this_function(s: str) -> bool:
    ''' Check if the string contains only ( and ) characters. '''
    for char in s:
        if char not in '()':
            return False
    return True"
Parentheses,True,The parenthesis string shall contain an equal number of ( characters and ) characters.,"def this_function(s: str) -> bool:
    ''' Check if the parenthesis string contains an equal number of ( characters and ) characters.'''
    open_count = s.count('(')
    close_count = s.count(')')
    return open_count == close_count"
Parentheses,True,"When scanning from left to right on the parentheses string, at no point shall the count of ) characters exceed the count of ( characters.","def this_function(s: str) -> bool:
    balance = 0
    for char in s:
        if char == '(':
            balance += 1
        elif char == ')':
            balance -= 1
        # If at any point the balance is negative, it means there are more ')' than '('
        if balance < 0:
            return False
    # If the balance is zero at the end, the parentheses are balanced
    return balance == 0"
Parentheses,False,The parentheses string shall be at most 9 characters long.,"def this_function(s: str) -> bool:
    ''' Check if the parentheses string is at most 9 characters long. '''
    return len(s) <= 9"
Parentheses,False,The parentheses string shall contain at least one character that is neither ( nor ).,"def this_function(s: str) -> bool:
    ''' Check if the string contains at least one character that is neither ( nor ). '''
    for char in s:
        if char != '(' and char != ')':
            return True
    return False"
Parentheses,False,The parenthesis string shall not contain an equal number of ( characters and ) characters.,"def this_function(s: str) -> bool:
    ''' Check if the parenthesis string shall not contain an equal number of ( characters and ) characters.'''
    open_count = s.count('(')
    close_count = s.count(')')
    return open_count != close_count"
Parentheses,False,"There shall exist at least one position in a parentheses string such that, when scanning from left to right up to that position, the count of ) characters exceeds the count of ( characters.","def this_function(s: str) -> bool:
    balance = 0
    for char in s:
        if char == '(':
            balance += 1
        elif char == ')':
            balance -= 1
        
        # Check if the balance is negative
        if balance < 0:
            return True
    
    # If we never found a negative balance, return False
    return False"
Password,True,The password shall be at least 4 characters long.,"def this_function(s: str) -> bool:
    ''' Check if the password is at least 4 characters long. '''
    return len(s) >= 4"
Password,True,"The password shall contain one of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if the password contains at least one of the following characters: !, #, $.'''
    special_characters = {'!', '#', '$'}
    return any(char in special_characters for char in s)"
Password,True,The password shall contain at least one upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one upper case character. '''
    return any(char.isupper() for char in s)"
Password,True,The password shall contain at least one lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one lowercase character. '''
    return any(c.islower() for c in s)"
Password,True,The password shall contain at least one number.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one number. '''
    for char in s:
        if char.isdigit():
            return True
    return False"
Password,False,The password shall contain less than 4 characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains less than 4 characters. '''
    return len(s) < 4"
Password,False,"The password shall not contain any of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if the password does not contain any of the following characters: !, #, $.'''
    forbidden_characters = {'!', '#', '$'}
    for char in forbidden_characters:
        if char in s:
            return False
    return True"
Password,False,The password shall not contain any upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password does not contain any upper case characters.'''
    # Iterate over each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            return False
    # If no uppercase characters are found, return True
    return True"
Password,False,The password shall not contain any lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password does not contain any lower case characters. '''
    # Check if there are no lowercase characters in the string
    return not any(char.islower() for char in s)"
Password,False,The password shall not contain any numbers.,"def this_function(s: str) -> bool:
    ''' Check if the password does not contain any numbers. '''
    for char in s:
        if char.isdigit():
            return False
    return True"
Url,True,The url shall start with either http:// or https://.,"def this_function(s: str) -> bool:
    ''' Check if the URL starts with either http:// or https://. '''
    return s.startswith(""http://"") or s.startswith(""https://"")"
Url,True,The url shall not contain any spaces.,"def this_function(s: str) -> bool:
    ''' Check if the URL does not contain any spaces. '''
    return ' ' not in s"
Url,True,The url shall contain at least one dot character (.).,"def this_function(s: str) -> bool:
    ''' Check if the URL contains at least one dot character (.). '''
    return '.' in s"
Url,False,"The url shall not start with http://, nor with https://.","def this_function(s: str) -> bool:
    ''' Check if the URL does not start with http:// or https://. '''
    return not (s.startswith(""http://"") or s.startswith(""https://""))"
Url,False,The url shall contain at least one space.,"def this_function(s: str) -> bool:
    ''' Check if the string contains at least one space. '''
    return ' ' in s"
Url,False,The url shall not contain any dot character (.).,"def this_function(s: str) -> bool:
    ''' Check if the URL does not contain any dot character (.). '''
    return '.' not in s"
