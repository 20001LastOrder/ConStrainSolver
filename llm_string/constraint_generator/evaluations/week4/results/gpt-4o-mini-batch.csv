sample_id,Name,NL description,NL negation,SMT-LIB2,SMT-LIB2 negation,Functions,Functions negation,SMT-LIB2 correct,SMT-LIB2 negation correct,Functions correct,Functions negation correct
01,Name,"1. The name shall only contain letters a-z, letters A-Z and space characters.

2. The name shall contain at least one space character.

3. The name shall not end with a space character.

4. The name shall not start with a space character.

5. The first character in the name shall be capitalized.

6. Any character in the name following a space character shall be capitalized.","1. The name shall contain at least one character that is neither a letter a-z, nor a letter A-Z, nor a space.

2. The name shall contain no space character.

3. The name shall end with a space character.

4. The name shall start with a space character.

5. The first character in the name shall not be capitalized.

6. In the name, there shall be some characters following a space character which are not capitalized.","1. (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (or (and (>= (str.at s i) ""a"") (<= (str.at s i) ""z"")) (and (>= (str.at s i) ""A"") (<= (str.at s i) ""Z"")) (str.eq (str.at s i) "" ""))))

2. (exists ((i Int)) (and (>= i 0) (< i (str.len s)) (str.eq (str.at s i) "" ""))) 

3. (not (str.eq (str.at s (- (str.len s) 1)) "" ""))

4. (not (str.eq (str.at s 0) "" ""))

5. (= (str.at s 0) (str.to.upper (str.at s 0)))

6. (forall ((i Int)) (=> (and (>= i 1) (< i (str.len s)) (str.eq (str.at s (- i 1)) "" "")) (str.eq (str.at s i) (str.to.upper (str.at s i)))))","









","[""def constraint1(s: str) -> bool: \n    ''' Check if The name shall only contain letters a-z, letters A-Z and space characters.'''\n    return all(c.isalpha() or c.isspace() for c in s)"", ""def constraint2(s: str) -> bool: \n    ''' Check if The name shall contain at least one space character.'''\n    return ' ' in s"", ""def constraint3(s: str) -> bool: \n    ''' Check if The name shall not end with a space character.'''\n    return not s.endswith(' ')"", ""def constraint4(s: str) -> bool: \n    ''' Check if The name shall not start with a space character.'''\n    return not s.startswith(' ')"", ""def constraint5(s: str) -> bool: \n    ''' Check if The first character in the name shall be capitalized.'''\n    return s and s[0].isupper()"", ""def constraint6(s: str) -> bool: \n    ''' Check if Any character in the name following a space character shall be capitalized.'''\n    words = s.split()\n    return all(word[0].isupper() for word in words if word)  # Check first character of each word""]","[""def constraint1(s: str) -> bool: \n    ''' Check if The name shall contain at least one character that is neither a letter a-z, nor a letter A-Z, nor a space.'''\n    return any(not (c.isalpha() or c.isspace()) for c in s)"", ""def constraint2(s: str) -> bool: \n    ''' Check if The name shall contain no space character.'''\n    return ' ' not in s"", ""def constraint3(s: str) -> bool: \n    ''' Check if The name shall end with a space character.'''\n    return s.endswith(' ')"", ""def constraint4(s: str) -> bool: \n    ''' Check if The name shall start with a space character.'''\n    return s.startswith(' ')"", ""def constraint5(s: str) -> bool: \n    ''' Check if The first character in the name shall not be capitalized.'''\n    return len(s) > 0 and not s[0].isupper()"", ""def constraint6(s: str) -> bool: \n    ''' Check if In the name, there shall be some characters following a space character which are not capitalized.'''\n    parts = s.split(' ')\n    for part in parts:\n        if part and not part[0].isupper():\n            return True\n    return False""]","[False, False, False, False, False, False]","[False, False, False, False, False, False]","[True, True, True, True, True, True]","[True, True, True, True, True, True]"
02,Email,"1. The email shall not contain a space character.

2. The email shall not start with a @ character.

3. The email shall have exactly one @ character.

4. The email shall include a dot character (.) after the @ character but before the end.

5. The final character of the email shall not be a dot character (.).

6. The email shall not contain the word ""manager"".","1. The email shall contain a space character.

2. The email shall start with a @ character.

3. The email shall have either no @ characters or more than one @ character.

4. If the email contains a @ character and there shall not include any dot characters (.) after the @ character and before the end.

5. The final character of the email shall be a dot character (.).

6. The email shall contain the word ""manager"".","1. (not (str.contains s "" ""))

2. (not (= (str.at s 0) ""@""))

3. (= (str.count s ""@"")(1))

4. (and (str.contains s ""@"")(str.contains (str.substr s (str.indexof s ""@"") (str.len s)) "".""))

5. (not (= (str.at s (str.len s - 1)) "".""))

6. (not (str.contains s ""manager""))","1. (str.contains s "" "")

2. (= (str.at s 0) ""@"")(not (str.contains s ""@""))

3. (or (not (str.contains s ""@"")) (> (str.count s ""@"") 1))

4. (=> (str.contains s ""@"")(not (str.contains (str.substr s (str.indexof s ""@"")) ""."")))

5. (= (str.at s (- (str.len s) 1)) ""."")

6. (str.contains s ""manager"")","[""def constraint1(s: str) -> bool: \n    ''' Check if The email shall not contain a space character.'''\n    return ' ' not in s"", ""def constraint2(s: str) -> bool: \n    ''' Check if The email shall not start with a @ character.'''\n    return not s.startswith('@')"", ""def constraint3(s: str) -> bool: \n    ''' Check if The email shall have exactly one @ character.'''\n    return s.count('@') == 1"", ""def constraint4(s: str) -> bool: \n    ''' Check if The email shall include a dot character (.) after the @ character but before the end.'''\n    at_index = s.find('@')\n    return '.' in s[at_index:] and at_index < len(s) - 1"", ""def constraint5(s: str) -> bool: \n    ''' Check if The final character of the email shall not be a dot character (.).'''\n    return not s.endswith('.')"", 'def constraint6(s: str) -> bool: \n    \'\'\' Check if The email shall not contain the word ""manager"".\'\'\'\n    return \'manager\' not in s.lower()']","[""def constraint1(s: str) -> bool: \n    ''' Check if The email shall contain a space character.'''\n    return ' ' in s"", ""def constraint2(s: str) -> bool: \n    ''' Check if The email shall start with a @ character.'''\n    return s.startswith('@')"", ""def constraint3(s: str) -> bool: \n    ''' Check if The email shall have either no @ characters or more than one @ character.'''\n    return s.count('@') != 1"", ""def constraint4(s: str) -> bool: \n    ''' Check if If the email contains a @ character and there shall not include any dot characters (.) after the @ character and before the end.'''\n    if '@' in s:\n        at_index = s.index('@')\n        return '.' not in s[at_index:]\n    return True  # If there's no '@', this condition is trivially satisfied"", ""def constraint5(s: str) -> bool: \n    ''' Check if The final character of the email shall be a dot character (.).'''\n    return s.endswith('.')"", 'def constraint6(s: str) -> bool: \n    \'\'\' Check if The email shall contain the word ""manager"".\'\'\'\n    return \'manager\' in s']","[True, True, False, True, False, True]","[True, False, False, False, True, True]","[True, True, True, True, True, True]","[True, True, True, True, True, True]"
03,Password,"1. The password shall be at least 4 characters long.

2. The password shall contain one of the following characters: !, #, $.

3. The password shall contain at least one upper case characters.

4. The password shall contain at least one lower case characters.

5. The password shall contain at least one number.","1. The password shall contain less than 4 characters.

2. The password shall not contain any of the following characters: !, #, $.

3. The password shall not contain any upper case characters.

4. The password shall not contain any lower case characters.

5. The password shall not contain any numbers.","1. (>= (str.len s) 4)

2. (or (str.contains s ""!"") (str.contains s ""#"") (str.contains s ""$""))

3. (exists ((c String)) (and (str.contains s c) (isUpper c)))

4. (exists ((c String)) (and (str.contains s c) (isLower c)))

5. (exists ((d String)) (and (str.contains s d) (isDigit d)))","







","[""def constraint1(s: str) -> bool: \n    ''' Check if the password shall be at least 4 characters long.'''\n    return len(s) >= 4"", ""def constraint2(s: str) -> bool: \n    ''' Check if the password shall contain one of the following characters: !, #, $.'''\n    return any(char in s for char in ['!', '#', '$'])"", ""def constraint3(s: str) -> bool: \n    ''' Check if the password shall contain at least one upper case character.'''\n    return any(char.isupper() for char in s)"", ""def constraint4(s: str) -> bool: \n    ''' Check if the password shall contain at least one lower case character.'''\n    return any(char.islower() for char in s)"", ""def constraint5(s: str) -> bool: \n    ''' Check if the password shall contain at least one number.'''\n    return any(char.isdigit() for char in s)""]","[""def constraint1(s: str) -> bool: \n    ''' Check if the password shall contain less than 4 characters.'''\n    return len(s) < 4"", ""def constraint2(s: str) -> bool: \n    ''' Check if the password shall not contain any of the following characters: !, #, $.'''\n    forbidden_characters = {'!', '#', '$'}\n    return not any(char in forbidden_characters for char in s)"", ""def constraint3(s: str) -> bool: \n    ''' Check if the password shall not contain any upper case characters.'''\n    return not any(char.isupper() for char in s)"", ""def constraint4(s: str) -> bool: \n    ''' Check if the password shall not contain any lower case characters.'''\n    return not any(char.islower() for char in s)"", ""def constraint5(s: str) -> bool: \n    ''' Check if the password shall not contain any numbers.'''\n    return not any(char.isdigit() for char in s)""]","[True, True, False, False, False]","[False, False, False, False, False]","[True, True, True, True, True]","[True, True, True, True, True]"
04,Url,"1. The url shall start with either http:// or https://.

2. The url shall not contain any spaces.

3. The url shall contain at least one dot character (.).","1. The url shall not start with http://, nor with https://.

2. The url shall contain at least one space.

3. The url shall not contain any dot character (.).","1. (or (str.startsWith s ""http://"") (str.startsWith s ""https://""))

2. (not (str.contains s "" ""))

3. (str.contains s ""."")","



","[""def constraint1(s: str) -> bool: \n    ''' Check if the url shall start with either http:// or https://.'''\n    return s.startswith('http://') or s.startswith('https://')"", ""def constraint2(s: str) -> bool: \n    ''' Check if the url shall not contain any spaces.'''\n    return ' ' not in s"", ""def constraint3(s: str) -> bool: \n    ''' Check if the url shall contain at least one dot character (.).'''\n    return '.' in s""]","['def constraint1(s: str) -> bool: \n    \'\'\' Check if the URL shall not start with http://, nor with https://.\'\'\'\n    return not (s.startswith(""http://"") or s.startswith(""https://""))', ""def constraint2(s: str) -> bool: \n    ''' Check if the URL shall contain at least one space.'''\n    return ' ' in s"", ""def constraint3(s: str) -> bool: \n    ''' Check if the URL shall not contain any dot character (.).'''\n    return '.' not in s""]","[False, True, True]","[False, False, False]","[True, True, True]","[True, True, True]"
05,Date,"1. The date shall contain two hyphens.

2. If there is at least one hyphen, the part before the hyphen shall be a number between 0 and 2025.

3. If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.

4. If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.","1. The date shall contain either no hyphens, one hyphen or more than two hyphens.

2. There must be at least one hyphen and the part before the hyphen shall not be a number between 0 and 2025.

3. There must be at least two hyphens and the part after the first hyphen but before the second hyphen shall not be a number between 1 and 12.

4. There must be at least two hyphens an d the part after the second hyphen shall not be a number between 1 and 31.","1. (= (str.count s ""-"") 2)

2. (=> (>= (str.count s ""-"") 1) (and (>= (str.to.int (str.substr s 0 (str.indexof s ""-""))) 0) (<= (str.to.int (str.substr s 0 (str.indexof s ""-""))) 2025)))

3. (=> (>= (str.count s ""-"") 2) (and (>= (str.to.int (str.substr s (str.indexof s ""-"") (str.indexof s ""-"" (str.indexof s ""-"" 1) + 1))) 1) (<= (str.to.int (str.substr s (str.indexof s ""-"") (str.indexof s ""-"" (str.indexof s ""-"" 1) + 1))) 12)))

4. (=> (>= (str.count s ""-"") 2) (and (>= (str.to.int (str.substr s (str.indexof s ""-"" (str.indexof s ""-"" 1) + 1) (str.length s))) 1) (<= (str.to.int (str.substr s (str.indexof s ""-"" (str.indexof s ""-"" 1) + 1) (str.length s))) 31)))","1. (or (not (str.contains s ""-"")) (= (str.count s ""-"") 1) (> (str.count s ""-"") 2))

2. (and (>= (str.count s ""-"") 1) (not (and (str.contains s ""-"") (<= (str.to.int (str.substr s 0 (str.indexof s ""-""))) 2025))))

3. (and (>= (str.count s ""-"") 2) (not (and (str.contains s ""-"") (<= (str.to.int (str.substr s (str.indexof s ""-"") (str.indexof s ""-"" (str.indexof s ""-"" 1))) 1) 12))))

4. (and (>= (str.count s ""-"") 2) (not (and (str.contains s ""-"") (<= (str.to.int (str.substr s (str.indexof s ""-"" (str.indexof s ""-"" 1)) (str.length s))) 31))))","[""def constraint1(s: str) -> bool: \n    ''' Check if the date contains exactly two hyphens.'''\n    return s.count('-') == 2"", ""def constraint2(s: str) -> bool: \n    ''' Check if the part before the first hyphen is a number between 0 and 2025.'''\n    if '-' in s:\n        year_part = s.split('-')[0]\n        return year_part.isdigit() and 0 <= int(year_part) <= 2025\n    return False"", ""def constraint3(s: str) -> bool: \n    ''' Check if the part after the first hyphen but before the second hyphen is a number between 1 and 12.'''\n    parts = s.split('-')\n    if len(parts) >= 3:\n        month_part = parts[1]\n        return month_part.isdigit() and 1 <= int(month_part) <= 12\n    return False"", ""def constraint4(s: str) -> bool: \n    ''' Check if the part after the second hyphen is a number between 1 and 31.'''\n    parts = s.split('-')\n    if len(parts) == 3:\n        day_part = parts[2]\n        return day_part.isdigit() and 1 <= int(day_part) <= 31\n    return False""]","[""def constraint1(s: str) -> bool: \n    ''' Check if the date shall contain either no hyphens, one hyphen or more than two hyphens.'''\n    hyphen_count = s.count('-')\n    return hyphen_count == 0 or hyphen_count == 1 or hyphen_count > 2"", ""def constraint2(s: str) -> bool: \n    ''' Check if there must be at least one hyphen and the part before the hyphen shall not be a number between 0 and 2025.'''\n    if '-' not in s:\n        return False\n    part_before_hyphen = s.split('-')[0]\n    return not (part_before_hyphen.isdigit() and 0 <= int(part_before_hyphen) <= 2025)"", ""def constraint3(s: str) -> bool: \n    ''' Check if there must be at least two hyphens and the part after the first hyphen but before the second hyphen shall not be a number between 1 and 12.'''\n    parts = s.split('-')\n    if len(parts) < 3:\n        return False\n    part_after_first_hyphen = parts[1]\n    return not (part_after_first_hyphen.isdigit() and 1 <= int(part_after_first_hyphen) <= 12)"", ""def constraint4(s: str) -> bool: \n    ''' Check if there must be at least two hyphens and the part after the second hyphen shall not be a number between 1 and 31.'''\n    parts = s.split('-')\n    if len(parts) < 3:\n        return False\n    part_after_second_hyphen = parts[2]\n    return not (part_after_second_hyphen.isdigit() and 1 <= int(part_after_second_hyphen) <= 31)""]","[False, False, False, False]","[False, False, False, False]","[True, True, True, True]","[True, True, True, True]"
06,IBAN,"1. The length of the bank number shall be 22.

2. The bank number shall start with 1210.

3. The bank number shall have at least 6 characters, and the fifth and sixth characters shall both be 0.","1. The length of the bank account shall not be 22.

2. The bank number shall not start with 1210.

3. The bank number shall either have less than 6 characters, or either the fifth or sixth character shall not be 0.
","1. (= (str.len s) 22)

2. (str.startsWith s ""1210"")

3. (and (>= (str.len s) 6) (and (= (str.at s 4) ""0"") (= (str.at s 5) ""0"")))","1. (not (= s 22))

2. (not (str.startsWith s ""1210""))

3. (or (< (str.len s) 6) (or (not (= (str.at s 4) ""0"")) (not (= (str.at s 5) ""0""))))","[""def constraint1(s: str) -> bool: \n    ''' Check if the length of the bank number shall be 22.'''\n    return len(s) == 22"", 'def constraint2(s: str) -> bool: \n    \'\'\' Check if the bank number shall start with 1210.\'\'\'\n    return s.startswith(""1210"")', ""def constraint3(s: str) -> bool: \n    ''' Check if the bank number shall have at least 6 characters, and the fifth and sixth characters shall both be 0.'''\n    return len(s) >= 6 and s[4] == '0' and s[5] == '0'""]","[""def constraint1(s: str) -> bool:\n    ''' Check if the length of the bank account shall not be 22.'''\n    return len(s) != 22"", 'def constraint2(s: str) -> bool:\n    \'\'\' Check if the bank number shall not start with 1210.\'\'\'\n    return not s.startswith(""1210"")', ""def constraint3(s: str) -> bool:\n    ''' Check if the bank number shall either have less than 6 characters, or either the fifth or sixth character shall not be 0.'''\n    if len(s) < 6:\n        return True\n    if len(s) >= 6:\n        return s[4] != '0' or s[5] != '0'\n    return False  # This line is technically unreachable due to the previous checks.""]","[True, False, True]","[False, False, True]","[True, True, True]","[True, True, True]"
07,ISBN,"1. The ISBN shall only contain numbers (0-9), the letter X, or hyphens.

2. The last character of the ISBN shall either be a number (0-9) or the letter X.

3. The ISBN shall contain exactly 10 characters, excluding hyphens.

4. The ISBN shall not start with a hyphen.

5. Hyphens shall not occur consecutively in the ISBN.

6. The ISBN shall contain at most 3 hyphens.","1. The ISBN shall contain at least one character that is neither a number (0-9), nor the letter X, nor a hyphen.

2. The last character of the ISBN shall be neither a number (0-9), nor the letter X.

3. Without counting hyphens, the ISBN shall contain less than or more than 10 characters.

4. The ISBN shall start with a hyphen.

5. The ISBN shall contain two consecutive hyphens.

6. The ISBN shall contain more than 3 hyphens.","1. (forall ((c Char)) (=> (str.contains s (str.to.re (str.++ (str.from.int 0) (str.from.int 1) (str.from.int 2) (str.from.int 3) (str.from.int 4) (str.from.int 5) (str.from.int 6) (str.from.int 7) (str.from.int 8) (str.from.int 9) ""X"" ""-""))) (or (and (not (str.contains s ""-"")) (not (str.contains s ""X"")))))

2. (or (and (= (str.at s (- (str.len s) 1)) ""X"") (str.contains s (str.to.re (str.++ (str.from.int 0) (str.from.int 1) (str.from.int 2) (str.from.int 3) (str.from.int 4) (str.from.int 5) (str.from.int 6) (str.from.int 7) (str.from.int 8) (str.from.int 9)))))

3. (= (str.len (str.replace s ""-"" """")) 10)

4. (not (= (str.at s 0) ""-""))

5. (not (str.contains s ""--""))

6. (<= (str.count s ""-"") 3)","1. (exists ((c String)) (and (not (str.in.re c (re.++ (re.range ""0"" ""9"") (re.range ""X"")))) (str.contains s c)))

2. (not (str.in.re (str.at s (- (str.len s) 1)) (re.++ (re.range ""0"" ""9"") (re.range ""X""))))

3. (or (< (str.len (str.replace s ""-"" """")) 10) (> (str.len (str.replace s ""-"" """")) 10))

4. (= (str.at s 0) ""-"")

5. (str.contains s ""--"")

6. (> (str.count s ""-"") 3)","['def constraint1(s: str) -> bool: \n    \'\'\' Check if The ISBN shall only contain numbers (0-9), the letter X, or hyphens.\'\'\'\n    valid_characters = set(""0123456789-X"")\n    return all(char in valid_characters for char in s)', 'def constraint2(s: str) -> bool: \n    \'\'\' Check if The last character of the ISBN shall either be a number (0-9) or the letter X.\'\'\'\n    if len(s) == 0:\n        return False\n    return s[-1] in ""0123456789X""', 'def constraint3(s: str) -> bool: \n    \'\'\' Check if The ISBN shall contain exactly 10 characters, excluding hyphens.\'\'\'\n    stripped_s = s.replace(""-"", """")\n    return len(stripped_s) == 10', 'def constraint4(s: str) -> bool: \n    \'\'\' Check if The ISBN shall not start with a hyphen.\'\'\'\n    return not s.startswith(""-"")', 'def constraint5(s: str) -> bool: \n    \'\'\' Check if Hyphens shall not occur consecutively in the ISBN.\'\'\'\n    return ""--"" not in s', 'def constraint6(s: str) -> bool: \n    \'\'\' Check if The ISBN shall contain at most 3 hyphens.\'\'\'\n    return s.count(""-"") <= 3']","[""def constraint1(s: str) -> bool: \n    ''' Check if The ISBN shall contain at least one character that is neither a number (0-9), nor the letter X, nor a hyphen.'''\n    return any(c not in '0123456789X-' for c in s)"", ""def constraint2(s: str) -> bool: \n    ''' Check if The last character of the ISBN shall be neither a number (0-9), nor the letter X.'''\n    return len(s) > 0 and s[-1] not in '0123456789X'"", ""def constraint3(s: str) -> bool: \n    ''' Check if Without counting hyphens, the ISBN shall contain less than or more than 10 characters.'''\n    count_without_hyphens = len(s.replace('-', ''))\n    return count_without_hyphens != 10"", ""def constraint4(s: str) -> bool: \n    ''' Check if The ISBN shall start with a hyphen.'''\n    return s.startswith('-')"", ""def constraint5(s: str) -> bool: \n    ''' Check if The ISBN shall contain two consecutive hyphens.'''\n    return '--' in s"", ""def constraint6(s: str) -> bool: \n    ''' Check if The ISBN shall contain more than 3 hyphens.'''\n    return s.count('-') > 3""]","[False, False, True, True, True, False]","[False, False, True, True, True, False]","[True, True, True, True, True, True]","[True, True, True, True, True, True]"
08,Expression,"1. The arithmetic expression shall only contain numbers (0-9) and arithmetic operators (+, -, *, /).

2. The arithmetic operators (+, -, *, /) in the arithmetic expression shall not appear consecutively.

3. Except for the minus sign (-), every operator (+, *, /) in the arithmetic expression shall have a number before and after it.

4. The arithmetic expression shall not start with operators from the set {+, *, /}.","1. The arithmetic expression shall contain at least one character that is neither a number (0-9), nor an arithmetic operator (+, -, *, /).

2. The arithmetic expression shall contain consecutive arithmetic operators (+, -, *, /).

3. The arithmetic expression shall contain an operator from the set {+, *, /} that either does not have a number immediately before it or does not have a number immediately after it.

4. The arithmetic expression shall start with one of the operators in the set {+, *, /}.","1. (forall ((c Char)) (=> (not (or (and (>= c #\0) (<= c #\9)) (or (= c #\+) (= c #\-) (= c #\*) (= c #\/)))) (not (str.contains s (str.mk_char c)))))

2. (not (or (str.contains s ""++"") (str.contains s ""--"") (str.contains s ""**"") (str.contains s ""//"")))

3. (forall ((op Char)) (=> (or (= op #\+) (= op #\*) (= op #\/)) (and (exists ((n1 Int)) (exists ((n2 Int)) (and (str.contains s (str.mk_char op)) (not (or (not (str.contains s (str.mk_char n1))) (not (str.contains s (str.mk_char n2)))))))))))

4. (not (or (str.startsWith s ""+"") (str.startsWith s ""*"") (str.startsWith s ""/"")))","1. (exists ((c Char)) (and (not (or (and (>= c (char 48)) (<= c (char 57))) (or (= c (char 43)) (= c (char 45)) (= c (char 42)) (= c (char 47)))))))

2. (exists ((i Int)) (and (>= i 0) (< i (- (str.len s) 1)) (or (and (= (str.at s i) (char 43)) (= (str.at s (+ i 1)) (char 43))) (and (= (str.at s i) (char 45)) (= (str.at s (+ i 1)) (char 45))) (and (= (str.at s i) (char 42)) (= (str.at s (+ i 1)) (char 42))) (and (= (str.at s i) (char 47)) (= (str.at s (+ i 1)) (char 47))))))

3. (exists ((i Int)) (and (>= i 0) (< i (str.len s)) (or (and (or (= (str.at s i) (char 43)) (= (str.at s i) (char 42)) (= (str.at s i) (char 47))) (not (and (>= (str.at s (- i 1)) (char 48)) (<= (str.at s (- i 1)) (char 57))))) (and (or (= (str.at s i) (char 43)) (= (str.at s i) (char 42)) (= (str.at s i) (char 47))) (not (and (>= (str.at s (+ i 1)) (char 48)) (<= (str.at s (+ i 1)) (char 57))))))))

4. (or (= (str.at s 0) (char 43)) (= (str.at s 0) (char 42)) (= (str.at s 0) (char 47)))","[""def constraint1(s: str) -> bool:\n    ''' Check if the arithmetic expression shall only contain numbers (0-9) and arithmetic operators (+, -, *, /).'''\n    return bool(re.fullmatch(r'[0-9+\\-*/ ]+', s))"", ""def constraint2(s: str) -> bool:\n    ''' Check if the arithmetic operators (+, -, *, /) in the arithmetic expression shall not appear consecutively.'''\n    return not bool(re.search(r'[+\\-*/]{2,}', s))"", ""def constraint3(s: str) -> bool:\n    ''' Check if except for the minus sign (-), every operator (+, *, /) in the arithmetic expression shall have a number before and after it.'''\n    # This regex checks for operators that are not preceded or followed by a digit\n    return not bool(re.search(r'(?<!\\d)[+\\*/](?!\\d)', s))"", ""def constraint4(s: str) -> bool:\n    ''' Check if the arithmetic expression shall not start with operators from the set {+, *, /}.'''\n    return not s.startswith(('+', '*', '/'))""]","[""def constraint1(s: str) -> bool:\n    ''' Check if the arithmetic expression contains at least one character that is neither a number (0-9), nor an arithmetic operator (+, -, *, /).'''\n    # Define a regex pattern for valid characters (numbers and operators)\n    valid_pattern = r'^[0-9+\\-*/]*$'\n    # Check if the string matches the valid pattern\n    if re.match(valid_pattern, s):\n        return False  # All characters are valid\n    return True  # Contains at least one invalid character"", ""def constraint2(s: str) -> bool:\n    ''' Check if the arithmetic expression contains consecutive arithmetic operators (+, -, *, /).'''\n    # Define a regex pattern for consecutive operators\n    consecutive_operators_pattern = r'[+\\-*/]{2,}'\n    # Check if the string contains consecutive operators\n    return bool(re.search(consecutive_operators_pattern, s))"", ""def constraint3(s: str) -> bool:\n    ''' Check if the arithmetic expression contains an operator from the set {+, *, /} that either does not have a number immediately before it or does not have a number immediately after it.'''\n    # Define a regex pattern for operators without numbers before or after\n    invalid_operator_pattern = r'(?<![0-9])[+\\-*/]|[+\\-*/](?![0-9])'\n    # Check if the string contains such invalid operators\n    return bool(re.search(invalid_operator_pattern, s))"", ""def constraint4(s: str) -> bool:\n    ''' Check if the arithmetic expression starts with one of the operators in the set {+, *, /}.'''\n    # Check if the first character is one of the specified operators\n    return s.startswith(('+', '*', '/'))""]","[False, True, False, False]","[False, False, False, False]","[True, True, True, True]","[True, True, True, True]"
09,Palindrome,"1. The palindrome shall be at least 3 characters long.

2. The palindrome shall be identical to its reverse.","1. The palindrome shall be at most 2 characters long.

2. The palindrome shall not be identical to its reverse.","1. (>= (str.len s) 3)

2. (= s (str.reverse s))","1. (<= (str.len s) 2)

2. (not (= s (str.reverse s)))","[""def constraint1(s: str) -> bool: \n    ''' Check if the palindrome shall be at least 3 characters long.'''\n    return len(s) >= 3"", ""def constraint2(s: str) -> bool: \n    ''' Check if the palindrome shall be identical to its reverse.'''\n    return s == s[::-1]""]","[""def constraint1(s: str) -> bool:\n    ''' Check if the palindrome shall be at most 2 characters long. '''\n    # A palindrome of at most 2 characters can be either 1 character or 2 identical characters\n    return len(s) <= 2 and s == s[::-1]"", ""def constraint2(s: str) -> bool:\n    ''' Check if the palindrome shall not be identical to its reverse. '''\n    # A string is not identical to its reverse if it is not a palindrome\n    return s != s[::-1]""]","[True, False]","[True, False]","[True, True]","[True, True]"
10,Parentheses,"1. The parentheses string shall be at least 10 characters long.

2. The parentheses string shall only contains ( and ) characters.

3. The parenthesis string shall contain an equal number of ( characters and ) characters.

4. When scanning from left to right on the parentheses string, at no point shall the count of ) characters exceed the count of ( characters.","1. The parentheses string shall be at most 9 characters long.

2. The parentheses string shall contain at least one character that is neither ( nor ).

3. The parenthesis string shall not contain an equal number of ( characters and ) characters.

4. There shall exist at least one position in a parentheses string such that, when scanning from left to right up to that position, the count of ) characters exceeds the count of ( characters.","1. (>= (str.len s) 10)

2. (and (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (or (= (str.at s i) ""("") (= (str.at s i) "")"")))))

3. (= (str.count s ""("") (str.count s "")""))

4. (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (>= (str.count (str.substr s 0 i) ""("") (str.count (str.substr s 0 i) "")""))))","1. (<= (str.len s) 9)

2. (exists ((i Int)) (and (>= i 0) (< i (str.len s)) (not (or (= (str.at s i) ""("") (= (str.at s i) "")"")))))

3. (not (= (str.count s ""("") (str.count s "")"")))

4. (exists ((i Int)) (and (>= i 0) (< i (str.len s)) (> (str.count (str.substr s 0 i) "")"") (str.count (str.substr s 0 i) ""(""))))","[""def constraint1(s: str) -> bool: \n    ''' Check if the parentheses string shall be at least 10 characters long.'''\n    return len(s) >= 10"", ""def constraint2(s: str) -> bool: \n    ''' Check if the parentheses string shall only contain ( and ) characters.'''\n    return all(char in '()' for char in s)"", ""def constraint3(s: str) -> bool: \n    ''' Check if the parentheses string shall contain an equal number of ( characters and ) characters.'''\n    return s.count('(') == s.count(')')"", ""def constraint4(s: str) -> bool: \n    ''' Check if when scanning from left to right on the parentheses string, at no point shall the count of ) characters exceed the count of ( characters.'''\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return True""]","[""def constraint1(s: str) -> bool:\n    ''' Check if the parentheses string shall be at most 9 characters long.'''\n    return len(s) <= 9"", ""def constraint2(s: str) -> bool:\n    ''' Check if the parentheses string shall contain at least one character that is neither ( nor ).'''\n    return any(char not in '()' for char in s)"", ""def constraint3(s: str) -> bool:\n    ''' Check if the parentheses string shall not contain an equal number of ( characters and ) characters.'''\n    return s.count('(') != s.count(')')"", ""def constraint4(s: str) -> bool:\n    ''' Check if there shall exist at least one position in a parentheses string such that, when scanning from left to right up to that position, the count of ) characters exceeds the count of ( characters.'''\n    count_open = 0\n    count_close = 0\n    for char in s:\n        if char == '(':\n            count_open += 1\n        elif char == ')':\n            count_close += 1\n        if count_close > count_open:\n            return True\n    return False""]","[True, True, False, False]","[True, True, False, False]","[True, True, True, True]","[True, True, True, True]"
11,DNA,"1. The DNA sequence shall only contain letters A, T, C and G.

2. The length of The DNA sequence shall be at least 10.

3. The length of The DNA sequence shall be a multiple of three.

4. The DNA sequence shall start with ATG.

5. The DNA sequence shall end with either TAA, or TAG, or TGA.","1. The DNA sequence shall contain at least one letter that is neither A, nor T, nor C, nor G.

2. The length of the DNA sequence shall be at most 9.

3. The length of the DNA sequence shall not a multiple of three.

4. The DNA sequence shall not start with ATG.

5. The DNA sequence shall not end with TAA, nor with TAG, nor with TGA.","1. (assert (forall ((s String)) (and (str.contains s ""A"") (str.contains s ""T"") (str.contains s ""C"") (str.contains s ""G""))))

2. (assert (>= (str.len s) 10))

3. (assert (= (mod (str.len s) 3) 0))

4. (assert (= (str.substr s 0 3) ""ATG""))

5. (assert (or (= (str.substr s (- (str.len s) 3) 3) ""TAA"") (= (str.substr s (- (str.len s) 3) 3) ""TAG"") (= (str.substr s (- (str.len s) 3) 3) ""TGA"")))","1. (exists ((c String)) (and (not (= c ""A"")) (not (= c ""T"")) (not (= c ""C"")) (not (= c ""G"")) (str.contains s c)))

2. (<= (str.len s) 9)

3. (not (= (mod (str.len s) 3) 0))

4. (not (str.startsWith s ""ATG""))

5. (not (or (str.endsWith s ""TAA"") (str.endsWith s ""TAG"") (str.endsWith s ""TGA"")))","[""def constraint1(s: str) -> bool: \n    ''' Check if the DNA sequence shall only contain letters A, T, C, and G.'''\n    return all(char in 'ATCG' for char in s)"", ""def constraint2(s: str) -> bool: \n    ''' Check if the length of the DNA sequence shall be at least 10.'''\n    return len(s) >= 10"", ""def constraint3(s: str) -> bool: \n    ''' Check if the length of the DNA sequence shall be a multiple of three.'''\n    return len(s) % 3 == 0"", ""def constraint4(s: str) -> bool: \n    ''' Check if the DNA sequence shall start with ATG.'''\n    return s.startswith('ATG')"", ""def constraint5(s: str) -> bool: \n    ''' Check if the DNA sequence shall end with either TAA, TAG, or TGA.'''\n    return s.endswith(('TAA', 'TAG', 'TGA'))""]","[""def constraint1(s: str) -> bool: \n    ''' Check if the DNA sequence contains at least one letter that is neither A, nor T, nor C, nor G.'''\n    return any(base not in 'ATCG' for base in s)"", ""def constraint2(s: str) -> bool: \n    ''' Check if the length of the DNA sequence is at most 9.'''\n    return len(s) <= 9"", ""def constraint3(s: str) -> bool: \n    ''' Check if the length of the DNA sequence is not a multiple of three.'''\n    return len(s) % 3 != 0"", ""def constraint4(s: str) -> bool: \n    ''' Check if the DNA sequence does not start with ATG.'''\n    return not s.startswith('ATG')"", ""def constraint5(s: str) -> bool: \n    ''' Check if the DNA sequence does not end with TAA, TAG, or TGA.'''\n    return not (s.endswith('TAA') or s.endswith('TAG') or s.endswith('TGA'))""]","[False, False, False, False, False]","[True, True, True, False, False]","[True, True, True, True, True]","[True, True, True, True, True]"
12,Absolute_Path,"1. The absolute path shall start with the root directory ""/"".

2. The absolute path shall not contain any spaces.

3. The absolute path shall not end with ""/"".

4. The absolute path shall not contain consecutive ""/"" characters.","1. The absolute path shall not start with the root directory ""/"".

2. The absolute path shall contain at least one space.

3. The absolute path shall end with ""/"".

4. The absolute path shall contain consecutive ""/"" characters.","1. (= (str.at s 0) ""/"")

2. (not (str.contains s "" ""))

3. (not (= (str.at s (- (str.len s) 1)) ""/""))

4. (not (str.contains s ""//""))","1. (not (= (str.at s 0) ""/""))

2. (str.contains s "" "")

3. (= (str.at s (- (str.len s) 1)) ""/"")

4. (str.contains s ""//"")","['def constraint1(s: str) -> bool: \n    \'\'\' Check if The absolute path shall start with the root directory ""/"".\'\'\'\n    return s.startswith(\'/\')', ""def constraint2(s: str) -> bool: \n    ''' Check if The absolute path shall not contain any spaces.'''\n    return ' ' not in s"", 'def constraint3(s: str) -> bool: \n    \'\'\' Check if The absolute path shall not end with ""/"".\'\'\'\n    return not s.endswith(\'/\')', 'def constraint4(s: str) -> bool: \n    \'\'\' Check if The absolute path shall not contain consecutive ""/"" characters.\'\'\'\n    return \'//\' not in s']","['def constraint1(s: str) -> bool: \n    \'\'\' Check if The absolute path shall not start with the root directory ""/"".\'\'\'\n    return not s.startswith(\'/\')', ""def constraint2(s: str) -> bool: \n    ''' Check if The absolute path shall contain at least one space.'''\n    return ' ' in s"", 'def constraint3(s: str) -> bool: \n    \'\'\' Check if The absolute path shall end with ""/"".\'\'\'\n    return s.endswith(\'/\')', 'def constraint4(s: str) -> bool: \n    \'\'\' Check if The absolute path shall contain consecutive ""/"" characters.\'\'\'\n    return \'//\' in s']","[True, True, True, True]","[True, True, True, True]","[True, True, True, True]","[True, True, True, True]"
