name,mask,nl_constraint,function
Name,True,"The name shall only contain letters a-z, letters A-Z and space characters.","def this_function(s: str) -> bool:
    ''' 
    Check if the name shall only contain letters a-z, letters A-Z and space characters.
    
    Args:
    s (str): The string to be checked.
    
    Returns:
    bool: True if the string contains only letters and spaces, False otherwise.
    '''
    # Use a regular expression to match only letters and spaces
    pattern = r'^[a-zA-Z\s]+$'
    return bool(re.match(pattern, s))"
Name,True,The name shall contain at least one space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall contain at least one space character.'''
    return ' ' in s"
Name,True,The name shall not end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall not end with a space character.'''
    return not s.endswith(' ')"
Name,True,The name shall not start with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall not start with a space character.'''
    return not s.startswith(' ')"
Name,False,"The name shall not contain letters a-z, letters A-Z and spaces.","def this_function(s: str) -> bool:
    ''' Check if the string does not contain letters a-z, letters A-Z, and spaces.'''
    for char in s:
        if char.isalpha() or char == ' ':
            return False
    return True"
Name,False,The name shall contain no space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall contain no space character.'''
    return ' ' not in s"
Name,False,The name shall end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall end with a space character.'''
    return s.endswith(' ')"
Name,False,The name shall start  with a space character.,"def this_function(s: str) -> bool:
    '''Check if the name shall start with a space character.'''
    return s.startswith(' ')"
Email,True,The email shall not contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall not contain a space character.'''
    return ' ' not in s"
Email,True,The email shall not start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall not start with a @ character.'''
    return not s.startswith('@')"
Email,True,The email shall have exactly one @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall have exactly one @ character.'''
    return s.count('@') == 1"
Email,True,"If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.","def this_function(s: str) -> bool:
    ''' 
    Check if the email contains a @ character, then the email shall include a dot character (.) 
    after the @ character but before the end.
    '''
    at_index = s.find('@')
    
    # If '@' is not found, return True (no condition to check)
    if at_index == -1:
        return True
    
    # Check if there is a '.' after '@' and before the end of the string
    dot_index = s.find('.', at_index)
    
    # If '.' is found after '@' and not at the end, return True
    if dot_index != -1 and dot_index < len(s) - 1:
        return True
    
    # Otherwise, return False
    return False"
Email,False,The email shall contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall contain a space character.'''
    return ' ' in s"
Email,False,The email shall start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email starts with a @ character.'''
    return s.startswith('@')"
Email,False,The email shall have either no @ characters or more than one @ character.,"def this_function(s: str) -> bool:
    ''' 
    Check if the email shall have either no @ characters or more than one @ character.
    
    Args:
    s (str): The email address to check.
    
    Returns:
    bool: True if the email has no @ characters or more than one @ character, False otherwise.
    '''
    count = s.count('@')
    return count == 0 or count > 1"
Email,False,"If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.","def this_function(s: str) -> bool:
    ''' 
    Check if the email contains a @ character, then the email shall not include any dot characters (.) 
    after the @ character and before the end.
    
    Args:
    s (str): The email address to check.
    
    Returns:
    bool: True if the condition is met, False otherwise.
    '''
    at_index = s.find('@')
    
    # If '@' is not found, the condition is trivially satisfied
    if at_index == -1:
        return True
    
    # Check if there is any '.' after '@' and before the end
    substring_after_at = s[at_index + 1:]
    if '.' in substring_after_at:
        return False
    
    return True"
Password,True,The password shall be at least 4 characters long.,"def this_function(s: str) -> bool:
    '''Check if the password is at least 4 characters long.'''
    return len(s) >= 4"
Password,True,"The password shall contain one of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' 
    Check if the password contains one of the following characters: !, #, $.
    
    Args:
        s (str): The password string to check.
    
    Returns:
        bool: True if the password contains one of the required characters, False otherwise.
    '''
    required_chars = {'!', '#', '$'}
    return any(char in required_chars for char in s)"
Password,True,The password shall contain at least one upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one uppercase character.'''
    for char in s:
        if char.isupper():
            return True
    return False"
Password,True,The password shall contain at least one lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one lowercase character.'''
    for char in s:
        if char.islower():
            return True
    return False"
Password,False,The password shall contain less than 4 characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains less than 4 characters.'''
    return len(s) < 4"
Password,False,"The password shall not contain any of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' 
    Check if the password shall not contain any of the following characters: !, #, $.
    
    Args:
    s (str): The password string to be checked.
    
    Returns:
    bool: True if the password does not contain any forbidden characters, False otherwise.
    '''
    forbidden_chars = {'!', '#', '$'}
    
    # Check if any forbidden character is in the string
    for char in forbidden_chars:
        if char in s:
            return False
    
    return True"
Password,False,The password shall not contain any upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password shall not contain any upper case characters.'''
    return not any(char.isupper() for char in s)"
Password,False,The password shall not contain any lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password shall not contain any lowercase characters.'''
    for char in s:
        if char.islower():
            return False
    return True"
Date,True,The date shall contain two hyphens.,"def this_function(s: str) -> bool:
    ''' Check if the date shall contain two hyphens.'''
    return s.count('-') == 2"
Date,True,"If there are at least one hyphen, the part before the first hyphen shall be a number between 0 and 2025.","def this_function(s: str) -> bool:
    ''' 
    Check if there is at least one hyphen in the string. 
    If there is, ensure that the part before the first hyphen is a number between 0 and 2025.
    '''
    if '-' in s:
        before_hyphen = s.split('-')[0]
        if before_hyphen.isdigit():
            number = int(before_hyphen)
            return 0 <= number <= 2025
        else:
            return False
    else:
        return True  # No hyphen, so the condition is trivially satisfied"
Date,True,"If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Extract the part between the first and second hyphens
    middle_part = parts[1]
    
    # Check if the middle part is a number between 1 and 12
    try:
        num = int(middle_part)
        return 1 <= num <= 12
    except ValueError:
        return False"
Date,True,"If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Get the part after the second hyphen
    number_part = parts[2]
    
    # Check if the part after the second hyphen is a number
    if not number_part.isdigit():
        return False
    
    # Convert the number part to an integer
    number = int(number_part)
    
    # Check if the number is between 1 and 31
    return 1 <= number <= 31"
Date,False,"The date shall contain either no hyphens, one hyphen or more than two hyphens.","def this_function(s: str) -> bool:
    ''' 
    Check if the date shall contain either no hyphens, one hyphen, or more than two hyphens.
    
    Args:
    s (str): The input string to check.
    
    Returns:
    bool: True if the string meets the criteria, False otherwise.
    '''
    # Count the number of hyphens in the string
    hyphen_count = s.count('-')
    
    # Check if the hyphen count is 0, 1, or more than 2
    return hyphen_count == 0 or hyphen_count == 1 or hyphen_count > 2"
Date,False,"If the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.","def this_function(s: str) -> bool:
    # Check if the string contains at least one hyphen
    if '-' in s:
        # Split the string at the first hyphen
        part_before_hyphen = s.split('-', 1)[0]
        
        # Check if the part before the hyphen is a number
        if part_before_hyphen.isdigit():
            number = int(part_before_hyphen)
            # Check if the number is smaller than 0 or larger than 2025
            return number < 0 or number > 2025
        else:
            # If it's not a number, return False
            return False
    else:
        # If there's no hyphen, return True (since the condition is about dates with hyphens)
        return True"
Date,False,"If the date has at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return True  # If there are fewer than two hyphens, the condition is trivially satisfied
    
    # Extract the part between the first and second hyphen
    middle_part = parts[1]
    
    # Check if the middle part is a number
    if not middle_part.isdigit():
        return False  # If it's not a number, the condition is not satisfied
    
    # Convert the middle part to an integer
    num = int(middle_part)
    
    # Check if the number is smaller than 1 or larger than 12
    return num < 1 or num > 12"
Date,False,"If the date has at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) >= 3:
        # Get the part after the second hyphen
        third_part = parts[2]
        
        # Check if the third part is a number
        if third_part.isdigit():
            num = int(third_part)
            # Check if the number is smaller than 1 or larger than 31
            return num < 1 or num > 31
        else:
            # If the third part is not a number, return False
            return False
    else:
        # If there are less than two hyphens, return True (condition is not applicable)
        return True"
