name,mask,nl_constraint,function
Name,True,"The name shall only contain letters a-z, letters A-Z and space characters.","def this_function(s: str) -> bool:
    ''' Check if The name shall only contain letters a-z, letters A-Z and space characters.'''
    # Use a regular expression to match only letters (a-z, A-Z) and spaces
    return bool(re.fullmatch(r'[A-Za-z\s]*', s))"
Name,True,The name shall contain at least one space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall contain at least one space character.'''
    # Check if there is at least one space in the string
    return ' ' in s"
Name,True,The name shall not end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall not end with a space character.'''
    # Check if the string does not end with a space
    return not s.endswith(' ')"
Name,True,The name shall not start with a space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall not start with a space character.'''
    # Check if the string does not start with a space
    return not s.startswith(' ')"
Name,False,"The name shall not contain letters a-z, letters A-Z and spaces.","def this_function(s: str) -> bool:
    ''' Check if The name shall not contain letters a-z, letters A-Z and spaces.'''
    # Check if the string contains any lowercase or uppercase letters or spaces
    for char in s:
        if char.isalpha() or char == ' ':
            return False
    return True"
Name,False,The name shall contain no space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall contain no space character.'''
    # Check if the string contains any space character
    return ' ' not in s"
Name,False,The name shall end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall end with a space character.'''
    # Check if the string ends with a space character
    return s.endswith(' ')"
Name,False,The name shall start  with a space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall start with a space character.'''
    # Check if the string starts with a space character
    return s.startswith(' ')"
Email,True,The email shall not contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall not contain a space character.'''
    return ' ' not in s"
Email,True,The email shall not start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall not start with a @ character.'''
    return not s.startswith('@')"
Email,True,The email shall have exactly one @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall have exactly one @ character.'''
    return s.count('@') == 1"
Email,True,"If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.","def this_function(s: str) -> bool:
    ''' Check if the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.'''
    if '@' in s:
        at_index = s.index('@')
        # Check if there is a dot after the @ and before the end of the string
        return '.' in s[at_index+1:]
    return True  # If there is no @, the condition is trivially satisfied"
Email,False,The email shall contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if The email shall contain a space character.'''
    return ' ' in s"
Email,False,The email shall start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if The email shall start with a @ character.'''
    return s.startswith('@')"
Email,False,The email shall have either no @ characters or more than one @ character.,"def this_function(s: str) -> bool:
    ''' Check if The email shall have either no @ characters or more than one @ character.'''
    return s.count('@') != 1"
Email,False,"If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.","def this_function(s: str) -> bool:
    ''' Check if If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.'''
    at_index = s.find('@')
    if at_index == -1:
        return True  # No @ character, so the condition is trivially satisfied
    return '.' not in s[at_index + 1:]"
Password,True,The password shall be at least 4 characters long.,"def this_function(s: str) -> bool:
    ''' Check if The password shall be at least 4 characters long.'''
    return len(s) >= 4"
Password,True,"The password shall contain one of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if The password shall contain one of the following characters: !, #, $.'''
    special_chars = {'!', '#', '$'}
    return any(char in special_chars for char in s)"
Password,True,The password shall contain at least one upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall contain at least one upper case characters.'''
    return any(char.isupper() for char in s)"
Password,True,The password shall contain at least one lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall contain at least one lower case characters.'''
    return any(char.islower() for char in s)"
Password,False,The password shall contain less than 4 characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall contain less than 4 characters.'''
    return len(s) < 4"
Password,False,"The password shall not contain any of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if The password shall not contain any of the following characters: !, #, $.'''
    forbidden_chars = {'!', '#', '$'}
    return not any(char in forbidden_chars for char in s)"
Password,False,The password shall not contain any upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall not contain any upper case characters.'''
    return not any(char.isupper() for char in s)"
Password,False,The password shall not contain any lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall not contain any lower case characters.'''
    return not any(char.islower() for char in s)"
Date,True,The date shall contain two hyphens.,"def this_function(s: str) -> bool:
    '''Check if the date contains exactly two hyphens.'''
    return s.count('-') == 2"
Date,True,"If there are at least one hyphen, the part before the first hyphen shall be a number between 0 and 2025.","def this_function(s: str) -> bool:
    '''Check if the part before the first hyphen is a number between 0 and 2025.'''
    if '-' in s:
        part = s.split('-')[0]
        if part.isdigit():
            year = int(part)
            return 0 <= year <= 2025
    return False"
Date,True,"If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.","def this_function(s: str) -> bool:
    '''Check if the part after the first hyphen but before the second hyphen is a number between 1 and 12.'''
    if s.count('-') >= 2:
        parts = s.split('-')
        if len(parts) > 1 and parts[1].isdigit():
            month = int(parts[1])
            return 1 <= month <= 12
    return False"
Date,True,"If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.","def this_function(s: str) -> bool:
    '''Check if the part after the second hyphen is a number between 1 and 31.'''
    if s.count('-') >= 2:
        parts = s.split('-')
        if len(parts) > 2 and parts[2].isdigit():
            day = int(parts[2])
            return 1 <= day <= 31
    return False"
Date,False,"The date shall contain either no hyphens, one hyphen or more than two hyphens.","def this_function(s: str) -> bool:
    ''' Check if The date shall contain either no hyphens, one hyphen or more than two hyphens.'''
    hyphen_count = s.count('-')
    return hyphen_count == 0 or hyphen_count == 1 or hyphen_count > 2"
Date,False,"If the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.","def this_function(s: str) -> bool:
    ''' Check if If the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.'''
    if '-' in s:
        part_before_first_hyphen = s.split('-')[0]
        try:
            num = int(part_before_first_hyphen)
            return num < 0 or num > 2025
        except ValueError:
            return False  # Not a valid number
    return True  # No hyphen, so condition is trivially satisfied"
Date,False,"If the date has at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.","def this_function(s: str) -> bool:
    ''' Check if If the date has at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.'''
    if s.count('-') >= 2:
        parts = s.split('-')
        try:
            num = int(parts[1])
            return num < 1 or num > 12
        except ValueError:
            return False  # Not a valid number
    return True  # Less than two hyphens, so condition is trivially satisfied"
Date,False,"If the date has at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.","def this_function(s: str) -> bool:
    ''' Check if If the date has at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.'''
    if s.count('-') >= 2:
        parts = s.split('-')
        try:
            num = int(parts[2])
            return num < 1 or num > 31
        except ValueError:
            return False  # Not a valid number
    return True  # Less than two hyphens, so condition is trivially satisfied"
