name,mask,nl_constraint,function
Name,True,"The name shall only contain letters a-z, letters A-Z and space characters.","def this_function(s: str) -> bool:
    ''' Check if the name contains only letters a-z, A-Z, and space characters. '''
    # Regular expression pattern to match only letters and spaces
    pattern = r'^[a-zA-Z\s]+$'
    return bool(re.match(pattern, s))"
Name,True,The name shall contain at least one space character.,"def this_function(s: str) -> bool:
    ''' Check if the name contains at least one space character. '''
    return ' ' in s"
Name,True,The name shall not end with a space character.,"def this_function(s: str) -> bool:
    '''Check if the name does not end with a space character.'''
    return not s.endswith(' ')"
Name,True,The name shall not start with a space character.,"def this_function(s: str) -> bool:
    ''' 
    Check if the name does not start with a space character.
    
    Returns True if the name does not start with a space, 
    otherwise returns False.
    '''
    return not s.startswith(' ')"
Name,False,"The name shall not contain letters a-z, letters A-Z and spaces.","def this_function(s: str) -> bool:
    '''Check if the name does not contain letters a-z, letters A-Z, and spaces.'''
    # Regular expression to match any letter or space
    pattern = r'[a-zA-Z ]'
    
    # Search for the pattern in the string
    if re.search(pattern, s):
        return False  # Contains forbidden characters
    else:
        return True   # Does not contain forbidden characters"
Name,False,The name shall contain no space character.,"def this_function(s: str) -> bool:
    ''' Check if the name contains no space character. '''
    return ' ' not in s"
Name,False,The name shall end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the given string ends with a space character. '''
    return s.endswith(' ')"
Name,False,The name shall start  with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name starts with a space character. '''
    return s.startswith(' ')"
Email,True,The email shall not contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the email does not contain a space character. '''
    return ' ' not in s"
Email,True,The email shall not start with a @ character.,"def this_function(s: str) -> bool:
    ''' 
    Check if the email does not start with a @ character.
    
    Parameters:
    s (str): The email address to check.
    
    Returns:
    bool: True if the email does not start with @, False otherwise.
    '''
    return not s.startswith('@')"
Email,True,The email shall have exactly one @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall have exactly one @ character. '''
    return s.count('@') == 1"
Email,True,"If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.","def this_function(s: str) -> bool:
    ''' 
    Check if the email contains a @ character, then the email shall include 
    a dot character (.) after the @ character but before the end.
    '''
    # Find the position of the '@' character
    at_index = s.find('@')
    
    # If '@' is not found, return False
    if at_index == -1:
        return False
    
    # Check if there's a '.' after the '@' and before the end of the string
    dot_index = s.find('.', at_index)
    
    # Ensure the '.' is not the last character
    if dot_index != -1 and dot_index < len(s) - 1:
        return True
    
    return False"
Email,False,The email shall contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the given string contains a space character. '''
    return ' ' in s"
Email,False,The email shall start with a @ character.,"def this_function(s: str) -> bool:
    '''Check if the string starts with a @ character.'''
    return s.startswith('@')"
Email,False,The email shall have either no @ characters or more than one @ character.,"def this_function(s: str) -> bool:
    ''' 
    Check if the email shall have either no @ characters or more than one @ character.
    
    Returns True if the condition is met, otherwise False.
    '''
    at_count = s.count('@')
    return at_count != 1"
Email,False,"If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.","def this_function(s: str) -> bool:
    ''' 
    Check if the email contains a @ character, then ensure 
    the email does not include any dot characters (.) after 
    the @ character and before the end.
    '''
    if '@' in s:
        # Find the position of '@'
        at_index = s.index('@')
        # Check for '.' after '@'
        if '.' in s[at_index:]:
            return False
    # If no '@' or no '.' after '@', return True
    return True"
Password,True,The password shall be at least 4 characters long.,"def this_function(s: str) -> bool:
    ''' Check if the password is at least 4 characters long. '''
    return len(s) >= 4"
Password,True,"The password shall contain one of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if the password contains at least one of the following characters: !, #, $.'''
    special_characters = {'!', '#', '$'}
    return any(char in special_characters for char in s)"
Password,True,The password shall contain at least one upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one uppercase character. '''
    return any(char.isupper() for char in s)"
Password,True,The password shall contain at least one lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password contains at least one lowercase character. '''
    for char in s:
        if char.islower():
            return True
    return False"
Password,False,The password shall contain less than 4 characters.,"def this_function(s: str) -> bool:
    ''' 
    Check if the password contains less than 4 characters.
    Returns True if the password is less than 4 characters long, otherwise False.
    '''
    return len(s) < 4"
Password,False,"The password shall not contain any of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if the password does not contain any of the following characters: !, #, $. '''
    forbidden_characters = {'!', '#', '$'}
    for char in s:
        if char in forbidden_characters:
            return False
    return True"
Password,False,The password shall not contain any upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password does not contain any upper case characters.'''
    for char in s:
        if char.isupper():
            return False
    return True"
Password,False,The password shall not contain any lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password does not contain any lower case characters.'''
    return not any(c.islower() for c in s)"
Date,True,The date shall contain two hyphens.,"def this_function(s: str) -> bool:
    ''' Check if the date string contains exactly two hyphens. '''
    return s.count('-') == 2"
Date,True,"If there are at least one hyphen, the part before the first hyphen shall be a number between 0 and 2025.","def this_function(s: str) -> bool:
    ''' Check if there are at least one hyphen, the part before the first hyphen shall be a number between 0 and 2025.'''
    # Check if there is at least one hyphen in the string
    if '-' in s:
        # Split the string at the first hyphen
        part_before_hyphen = s.split('-', 1)[0]
        
        # Check if the part before the first hyphen is a number
        if part_before_hyphen.isdigit():
            # Convert the part to an integer
            number = int(part_before_hyphen)
            
            # Check if the number is between 0 and 2025
            if 0 <= number <= 2025:
                return True
    
    # Return False if any of the conditions are not met
    return False"
Date,True,"If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.","def this_function(s: str) -> bool:
    # Split the string using hyphens as the separator
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) >= 3:
        # Extract the part between the first and second hyphen
        part_between_hyphens = parts[1]
        
        # Check if this part is a digit and within the range 1 to 12
        if part_between_hyphens.isdigit():
            number = int(part_between_hyphens)
            if 1 <= number <= 12:
                return True
    
    # Return False if conditions are not met
    return False"
Date,True,"If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.","def this_function(s: str) -> bool:
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least three parts
    if len(parts) < 3:
        return False
    
    # Try to convert the third part to an integer
    try:
        number = int(parts[2])
    except ValueError:
        return False
    
    # Check if the number is between 1 and 31
    return 1 <= number <= 31"
Date,False,"The date shall contain either no hyphens, one hyphen or more than two hyphens.","def this_function(s: str) -> bool:
    '''Check if the string contains either no hyphens, one hyphen, or more than two hyphens.'''
    hyphen_count = s.count('-')
    return hyphen_count != 2"
Date,False,"If the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.","def this_function(s: str) -> bool:
    # Check if there is at least one hyphen in the string
    if '-' in s:
        # Split the string at the first hyphen
        part_before_hyphen = s.split('-', 1)[0]
        
        # Try to convert the part before the hyphen to an integer
        try:
            number = int(part_before_hyphen)
            # Check if the number is either less than 0 or greater than 2025
            if number < 0 or number > 2025:
                return True
        except ValueError:
            # If conversion fails, it means the part before the hyphen is not a valid number
            return False
    
    # If there is no hyphen or the conditions are not met, return False
    return False"
Date,False,"If the date has at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.","def this_function(s: str) -> bool:
    ''' 
    Check if the date has at least two hyphens, and if so, 
    verify that the part after the first hyphen but before the second hyphen 
    is a number smaller than 1 or a number larger than 12.
    '''
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Extract the part between the first and second hyphen
    try:
        month_part = int(parts[1])
    except ValueError:
        # If the part is not a valid integer, return False
        return False
    
    # Check if the month part is less than 1 or greater than 12
    return month_part < 1 or month_part > 12"
Date,False,"If the date has at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.","def this_function(s: str) -> bool:
    ''' Check if the date has at least two hyphens, and the part after the second hyphen is a number smaller than 1 or larger than 31.'''
    parts = s.split('-')
    
    # Check if there are at least three parts
    if len(parts) < 3:
        return False
    
    try:
        # Convert the part after the second hyphen to an integer
        number = int(parts[2])
        
        # Check if the number is smaller than 1 or larger than 31
        if number < 1 or number > 31:
            return True
    except ValueError:
        # If conversion to integer fails, return False
        return False
    
    return False"
