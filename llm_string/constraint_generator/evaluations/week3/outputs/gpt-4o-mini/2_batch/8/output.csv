name,mask,nl_constraint,function
Name,True,"The name shall only contain letters a-z, letters A-Z and space characters.","def this_function(s: str) -> bool: 
    ''' Check if the name shall only contain letters a-z, letters A-Z and space characters.'''
    # Use regex to check if the string contains only letters and spaces
    return bool(re.match(r'^[a-zA-Z\s]+$', s))"
Name,True,The name shall contain at least one space character.,"def this_function(s: str) -> bool: 
    ''' Check if the name shall contain at least one space character.'''
    # Check if there is at least one space in the string
    return ' ' in s"
Name,True,The name shall not end with a space character.,"def this_function(s: str) -> bool: 
    ''' Check if the name shall not end with a space character.'''
    return not s.endswith(' ')"
Name,True,The name shall not start with a space character.,"def this_function(s: str) -> bool: 
    ''' Check if the name shall not start with a space character.'''
    return not s.startswith(' ')"
Name,False,"The name shall not contain letters a-z, letters A-Z and spaces.","def this_function(s: str) -> bool:
    ''' Check if the name shall not contain letters a-z, letters A-Z and spaces.'''
    # Check for letters (a-z, A-Z) and spaces
    if re.search(r'[a-zA-Z ]', s):
        return False
    return True"
Name,False,The name shall contain no space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall contain no space character.'''
    # Check for spaces
    if ' ' in s:
        return False
    return True"
Name,False,The name shall end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name ends with a space character.'''
    return s.endswith(' ')"
Name,False,The name shall start  with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name starts with a space character.'''
    return s.startswith(' ')"
Email,True,The email shall not contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall not contain a space character. '''
    return ' ' not in s"
Email,True,The email shall not start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall not start with a @ character. '''
    return not s.startswith('@')"
Email,True,The email shall have exactly one @ character.,"def this_function(s: str) -> bool: 
    ''' Check if the email has exactly one @ character.'''
    return s.count('@') == 1"
Email,True,"If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.","def this_function(s: str) -> bool: 
    ''' Check if the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.'''
    if '@' in s:
        at_index = s.index('@')
        # Check if there is a dot after the @ character
        return '.' in s[at_index+1:]
    return True  # If there is no @, this function does not apply, return True"
Email,False,The email shall contain a space character.,"def this_function(s: str) -> bool: 
    ''' Check if the email contains a space character.'''
    return ' ' in s"
Email,False,The email shall start with a @ character.,"def this_function(s: str) -> bool: 
    ''' Check if the email starts with a @ character.'''
    return s.startswith('@')"
Email,False,The email shall have either no @ characters or more than one @ character.,"def this_function(s: str) -> bool:
    ''' Check if the email shall have either no @ characters or more than one @ character.'''
    at_count = s.count('@')
    return at_count == 0 or at_count > 1"
Email,False,"If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.","def this_function(s: str) -> bool:
    ''' Check if If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.'''
    if '@' in s:
        # Find the position of the '@'
        at_index = s.index('@')
        # Check if there is a dot after the '@'
        return '.' not in s[at_index + 1:]
    return True  # If there's no '@', the condition is satisfied"
Password,True,The password shall be at least 4 characters long.,"def this_function(s: str) -> bool: 
    ''' Check if the password shall be at least 4 characters long.'''
    return len(s) >= 4"
Password,True,"The password shall contain one of the following characters: !, #, $.","def this_function(s: str) -> bool: 
    ''' Check if the password shall contain one of the following characters: !, #, $.'''
    special_characters = {'!', '#', '$'}
    return any(char in special_characters for char in s)"
Password,True,The password shall contain at least one upper case characters.,"def this_function(s: str) -> bool: 
    ''' Check if the password contains at least one upper case character.'''
    return any(c.isupper() for c in s)"
Password,True,The password shall contain at least one lower case characters.,"def this_function(s: str) -> bool: 
    ''' Check if the password contains at least one lower case character.'''
    return any(c.islower() for c in s)"
Password,False,The password shall contain less than 4 characters.,"def this_function(s: str) -> bool: 
    ''' Check if the password contains less than 4 characters.'''
    return len(s) < 4"
Password,False,"The password shall not contain any of the following characters: !, #, $.","def this_function(s: str) -> bool: 
    ''' Check if the password does not contain any of the following characters: !, #, $.'''
    forbidden_characters = {'!', '#', '$'}
    return not any(char in forbidden_characters for char in s)"
Password,False,The password shall not contain any upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password shall not contain any upper case characters. '''
    return not any(char.isupper() for char in s)"
Password,False,The password shall not contain any lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if the password shall not contain any lower case characters. '''
    return not any(char.islower() for char in s)"
Date,True,The date shall contain two hyphens.,"def this_function(s: str) -> bool: 
    ''' Check if the date contains exactly two hyphens.'''
    return s.count('-') == 2"
Date,True,"If there are at least one hyphen, the part before the first hyphen shall be a number between 0 and 2025.","def this_function(s: str) -> bool: 
    ''' Check if there is at least one hyphen and the part before the first hyphen is a number between 0 and 2025.'''
    if '-' in s:
        # Split the string at the first hyphen
        first_part = s.split('-')[0]
        # Check if the first part is a number and within the specified range
        if first_part.isdigit():
            number = int(first_part)
            return 0 <= number <= 2025
    return False"
Date,True,"If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.","def this_function(s: str) -> bool: 
    ''' Check if there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.'''
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # The part after the first hyphen and before the second hyphen
    month_part = parts[1]
    
    # Check if it's a number between 1 and 12
    if month_part.isdigit():
        month = int(month_part)
        return 1 <= month <= 12
    
    return False"
Date,True,"If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.","def this_function(s: str) -> bool: 
    ''' Check if there are at least two hyphens, The part after the second hyphen shall be a number between 1 and 31.'''
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # The part after the second hyphen
    day_part = parts[2]
    
    # Check if it's a number between 1 and 31
    if day_part.isdigit():
        day = int(day_part)
        return 1 <= day <= 31
    
    return False"
Date,False,"The date shall contain either no hyphens, one hyphen or more than two hyphens.","def this_function(s: str) -> bool:
    ''' Check if the date contains either no hyphens, one hyphen, or more than two hyphens. '''
    hyphen_count = s.count('-')
    return hyphen_count == 0 or hyphen_count == 1 or hyphen_count > 2"
Date,False,"If the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.","def this_function(s: str) -> bool:
    ''' Check if if the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025. '''
    if '-' in s:
        part_before_hyphen = s.split('-')[0]
        try:
            number = int(part_before_hyphen)
            return number < 0 or number > 2025
        except ValueError:
            # If the part before the hyphen is not a valid integer, return False
            return False
    return True  # If there are no hyphens, we can return True as per the requirement"
Date,False,"If the date has at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.","def this_function(s: str) -> bool: 
    ''' Check if the date has at least two hyphens, and the part after the first hyphen but before the second hyphen is a number smaller than 1 or larger than 12. '''
    
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Extract the part after the first hyphen and before the second hyphen
    month_part = parts[1]
    
    # Try to convert it to an integer
    try:
        month = int(month_part)
    except ValueError:
        return False  # Not a valid integer
    
    # Check the condition
    return month < 1 or month > 12"
Date,False,"If the date has at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.","def this_function(s: str) -> bool: 
    ''' Check if the date has at least two hyphens, and the part after the second hyphen is a number smaller than 1 or larger than 31. '''
    
    # Split the string by hyphens
    parts = s.split('-')
    
    # Check if there are at least two hyphens
    if len(parts) < 3:
        return False
    
    # Extract the part after the second hyphen
    day_part = parts[2]
    
    # Try to convert it to an integer
    try:
        day = int(day_part)
    except ValueError:
        return False  # Not a valid integer
    
    # Check the condition
    return day < 1 or day > 31"
