name,mask,nl_constraint,function
Name,True,"The name shall only contain letters a-z, letters A-Z and space characters.","def this_function(s: str) -> bool: 
    ''' Check if The name shall only contain letters a-z, letters A-Z and space characters.'''
    return re.fullmatch(r'[A-Za-z ]*', s) is not None"
Name,True,The name shall contain at least one space character.,"def this_function(s: str) -> bool: 
    ''' Check if The name shall contain at least one space character.'''
    return ' ' in s"
Name,True,The name shall not end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall not end with a space character.'''
    return not s.endswith(' ')"
Name,True,The name shall not start with a space character.,"def this_function(s: str) -> bool:
    ''' Check if The name shall not start with a space character.'''
    return not s.startswith(' ')"
Name,False,"The name shall not contain letters a-z, letters A-Z and spaces.",
Name,False,The name shall contain no space character.,
Name,False,The name shall end with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall end with a space character.'''
    return s.endswith(' ')"
Name,False,The name shall start  with a space character.,"def this_function(s: str) -> bool:
    ''' Check if the name shall start with a space character.'''
    return s.startswith(' ')"
Email,True,The email shall not contain a space character.,"def this_function(s: str) -> bool:
    ''' Check if The email shall not contain a space character.'''
    return ' ' not in s"
Email,True,The email shall not start with a @ character.,"def this_function(s: str) -> bool:
    ''' Check if The email shall not start with a @ character.'''
    return not s.startswith('@')"
Email,True,The email shall have exactly one @ character.,"def this_function(s: str) -> bool:
    ''' Check if The email shall have exactly one @ character.'''
    return s.count('@') == 1"
Email,True,"If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.","def this_function(s: str) -> bool:
    ''' Check if If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.'''
    if '@' not in s:
        return True
    if s.endswith('.'):
        return False
    for i in range(len(s)):
        if s[i] == '@' and '.' in s[i+1:]:
            return True
    return False"
Email,False,The email shall contain a space character.,
Email,False,The email shall start with a @ character.,
Email,False,The email shall have either no @ characters or more than one @ character.,
Email,False,"If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.",
Password,True,The password shall be at least 4 characters long.,
Password,True,"The password shall contain one of the following characters: !, #, $.",
Password,True,The password shall contain at least one upper case characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall contain at least one upper case characters.'''
    return any(c.isupper() for c in s)"
Password,True,The password shall contain at least one lower case characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall contain at least one lower case characters.'''
    return any(c.islower() for c in s)"
Password,False,The password shall contain less than 4 characters.,"def this_function(s: str) -> bool:
    ''' Check if The password shall contain less than 4 characters.'''
    return len(s) < 4"
Password,False,"The password shall not contain any of the following characters: !, #, $.","def this_function(s: str) -> bool:
    ''' Check if The password shall not contain any of the following characters: !, #, $.'''
    forbidden = {'!', '#', '$'}
    return not any(c in forbidden for c in s)"
Password,False,The password shall not contain any upper case characters.,
Password,False,The password shall not contain any lower case characters.,
Date,True,The date shall contain two hyphens.,
Date,True,"If there are at least one hyphen, the part before the first hyphen shall be a number between 0 and 2025.",
Date,True,"If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number between 1 and 12.",
Date,True,"If there are at least two hyphen, The part after the second hyphen shall be a number between 1 and 31.",
Date,False,"The date shall contain either no hyphens, one hyphen or more than two hyphens.",
Date,False,"If the date has at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.",
Date,False,"If the date has at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.","def this_function(s: str) -> bool:
    parts = s.split('-')
    if len(parts) < 3:
        return False
    middle = parts[1]
    try:
        num = int(middle)
    except ValueError:
        return False
    return num < 1 or num > 12"
Date,False,"If the date has at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.","def this_function(s: str) -> bool:
    first_hyphen = s.find('-')
    if first_hyphen == -1:
        return False
    second_hyphen = s.find('-', first_hyphen + 1)
    if second_hyphen == -1:
        return False
    part = s[second_hyphen + 1:]
    try:
        num = int(part)
    except ValueError:
        return False
    return num < 1 or num > 31"
