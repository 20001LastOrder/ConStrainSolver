Name,Content,NL description,NL negation,SMT-LIB2,SMT-LIB2 negation
Name,"Capitalization, Specific characters, ","1. The name shall only contain letters a-z, letters A-Z and space characters.

2. The name shall contain at least one space character.

3. The name shall not end with a space character.

4. The name shall not start with a space character.

5. The first character in the name shall be capitalized.

6. Any character in the name following a space character shall be capitalized.","1. The name shall not contain letters a-z, letters A-Z and spaces.

2. The name shall contain no space character.

3. The name shall end with a space character.

4. The name shall start  with a space character.

5. The first character in the name shall not be capitalized.

6. In the name, there shall be some characters following a space character which are not capitalized.","(assert (str.in.re s (re.* (re.union (re.range ""a"" ""z"") (re.range ""A"" ""Z"") (str.to.re "" "")))))

(assert (str.contains s "" ""))

(assert (not (str.suffixof "" "" s)))

(assert (not (= (str.at s 0) "" "")))

(assert (str.in.re (str.at s 0) (re.range ""A"" ""Z"")))

(assert (not (str.in.re s  (re.++ (re.* re.allchar) (str.to.re "" "") (re.inter (re.complement (re.range ""A"" ""Z"")) re.allchar ) (re.* re.allchar) ))))","(assert (not (str.in.re s (re.* (re.union (re.range ""a"" ""z"") (re.range ""A"" ""Z"") (str.to.re "" ""))))))

(assert (not (str.contains s "" "")))

(assert (str.suffixof "" "" s))

(assert (= (str.at s 0) "" ""))

(assert (not (str.in.re (str.at s 0) (re.range ""A"" ""Z""))))

(assert (str.in.re s  (re.++ (re.* re.allchar) (str.to.re "" "") (re.inter (re.complement (re.range ""A"" ""Z"")) re.allchar ) (re.* re.allchar) )))"
Email," not email.contains("" "")

// email must contain some characters (anything is allowed except @), a @, some characters, a dot, and some characters
// this is a simplified check sufficient for this application
email.indexOf(""@"") > 0 // index starts at zero
email.indexOf(""@"") = email.lastIndexOf(""@"")
email.indexOf(""@"") < email.lastIndexOf(""."") - 1
email.lastIndexOf(""."") < email.length() - 1

// email cannot contain the word “manager”
”manager” not in email
","1. The email shall not contain a space character.

2. The email shall not start with a @ character.

3. The email shall have exactly one @ character.

4. If the email contains a @ character, then the email shall include a dot character (.) after the @ character but before the end.

5. The final character of the email shall not be a dot character (.).

6. The email shall not contain the word “manager”.","1. The email shall contain a space character.

2. The email shall start with a @ character.

3. The email shall have either no @ characters or more than one @ character.

4. If the email contains a @ character, then the email shall not include any dot characters (.) after the @ character and before the end.

5. The final character of the email shall be a dot character (.).

6. The email shall contain the word “manager”.","(assert (not (str.contains s "" "")))

(assert (not (= (str.at s 0) ""@"")))

(assert (and (str.contains s ""@"") (not (str.in.re s  (re.++ (re.* re.allchar) (str.to.re ""@"") (re.* re.allchar) (str.to.re ""@"") (re.* re.allchar))))))

(assert (str.contains (str.substr s (str.indexof s ""@"" 0) (str.len s)) "".""))

(assert (not (= (str.at s (- (str.len s) 1)) ""."")))

(assert (not (str.contains s ""manager"")))","(assert (str.contains s "" ""))

(assert (= (str.at s 0) ""@""))

(assert (not (and (str.contains s ""@"") (not (str.in.re s  (re.++ (re.* re.allchar) (str.to.re ""@"") (re.* re.allchar) (str.to.re ""@"") (re.* re.allchar)))))))

(assert (not (str.contains (str.substr s (str.indexof s ""@"" 0) (str.len s)) ""."")))

(assert (= (str.at s (- (str.len s) 1)) "".""))

(assert (str.contains s ""manager""))"
Password,"// password must be at least four characters long
password.length() > 3
// password must contain a special character out of !#$
password.contains(""!"") or password.contains(""#"") or password.contains(""$"")
// password must contain an upper case character
there exists a character c in password such that Character.isUpperCase(c) = true
// password must contain a lower case character
there exists a character c in password such that Character.isLowerCase(c) = true","1. The password shall be at least 4 characters long.

2. The password shall contain one of the following characters: !, #, $.

3. The password shall contain at least one upper case characters.

4. The password shall contain at least one lower case characters.

5. The password shall contain at least one number.","1. The password shall contain less than 4 characters.

2. The password shall not contain any of the following characters: !, #, $.

3. The password shall not contain any upper case characters.

4. The password shall not contain any lower case characters.

5. The password shall not contain any numbers.","(assert (>= (str.len s) 4))

(assert (or (str.contains s ""!"") (str.contains s ""#"") (str.contains s ""$"")))

(assert (str.in.re s  (re.++ (re.* re.allchar) (re.range ""A"" ""Z"") (re.* re.allchar))))

(assert (str.in.re s  (re.++ (re.* re.allchar) (re.range ""a"" ""z"") (re.* re.allchar))))

(assert (str.in.re s  (re.++ (re.* re.allchar) (re.range ""0"" ""9"") (re.* re.allchar))))","(assert (not (>= (str.len s) 4)))

(assert (not (or (str.contains s ""!"") (str.contains s ""#"") (str.contains s ""$""))))

(assert (not (str.in.re s  (re.++ (re.* re.allchar) (re.range ""A"" ""Z"") (re.* re.allchar)))))

(assert (not (str.in.re s  (re.++ (re.* re.allchar) (re.range ""a"" ""z"") (re.* re.allchar)))))

(assert (not (str.in.re s  (re.++ (re.* re.allchar) (re.range ""0"" ""9"") (re.* re.allchar)))))"
Url,"url.substring(0, 6) = ""http://"" or url.substring(0, 7) = ""https://”","1. The url shall start with either http:// or https://.

2. The url shall not contain any spaces.

3. The url shall contain at least one dot character (.).","1. The url shall not start with http://, nor with https://.

2. The url shall contain at least one space.

3. The url shall not contain any dot character (.).","(assert (or (str.prefixof ""http://"" s) (str.prefixof ""https://"" s)))

(assert (not (str.contains s "" "")))

(assert (str.contains s "".""))","(assert (not (or (str.prefixof ""http://"" s) (str.prefixof ""https://"" s))))

(assert (str.contains s "" ""))

(assert (not (str.contains s ""."")))"
Date,,"1. The date shall contain two hyphens.

2. The part before the first hyphen shall be a number between 0 and 2025.

3. The part after the first hyphen but before the second hyphen shall be a number between 1 and 12.

4. The part after the second hyphen shall be a number between 1 and 31.","1. The date shall contain either no hyphens, one hyphen or more than two hyphens.

2. If there is at least one hyphen, the part before the first hyphen shall be either a number smaller than 0 or a number larger than 2025.

3. If there are at least two hyphens, the part after the first hyphen but before the second hyphen shall be a number smaller than 1 or a number larger than 12.

4. If there are at least two hyphens, the part after the second hyphen shall be a number smaller than 1 or larger than 31.","(assert (and (str.in.re s (re.++ (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar))) (not (str.in.re s (re.++ (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar)))) ))

(assert (let ((part1 (str.substr s 0 (str.indexof s ""-"" 0)))) (and (>= (str.to.int part1) 0) (<= (str.to.int part1) 2025))))

(assert (let ((start2 (+ (str.indexof s ""-"" 0) 1)) (end2 (str.indexof s ""-"" (+ (str.indexof s ""-"" 0) 1)))) (let ((part2 (str.substr s start2 (- end2 start2)))) (and (>= (str.to.int part2) 1) (<= (str.to.int part2) 12)))))

(assert (let ((start3 (+ (str.indexof s ""-"" (+ (str.indexof s ""-"" 0) 1)) 1))) (let ((part3 (str.substr s start3 (- (str.len s) start3)))) (and (>= (str.to.int part3) 1) (<= (str.to.int part3) 31)))))","(assert (not (and (str.in.re s (re.++ (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar))) (not (str.in.re s (re.++ (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar) (str.to.re ""-"") (re.* re.allchar)))) )))

(assert (let ((part1 (str.substr s 0 (str.indexof s ""-"" 0)))) (not (and (>= (str.to.int part1) 0) (<= (str.to.int part1) 2025)))))

(assert (let ((start2 (+ (str.indexof s ""-"" 0) 1)) (end2 (str.indexof s ""-"" (+ (str.indexof s ""-"" 0) 1)))) (let ((part2 (str.substr s start2 (- end2 start2)))) (not (and (>= (str.to.int part2) 1) (<= (str.to.int part2) 12))))))

(assert (let ((start3 (+ (str.indexof s ""-"" (+ (str.indexof s ""-"" 0) 1)) 1))) (let ((part3 (str.substr s start3 (- (str.len s) start3)))) (not (and (>= (str.to.int part3) 1) (<= (str.to.int part3) 31))))))"
IBAN,"A German IBAN consists of 22 characters which are characterized as follows:
The first two characters represent the country code (here, the constant “DE”)
while the third and fourth characters are a checksum. The remaining 18 digits
represent the Basic Bank Account Number (BBAN).
We can compute valid IBANs using a given country code as follows: Represent
the country code as a digit where “A” equals 10, “B” equals 11, etc. The German
country code “DE” is hence encoded as 1314. Concatenate two zeros to the
encoded country code (i.e., 131400) and prepend the BBAN. ","1. The length of the bank number shall be 22.

2. The first 4 numbers of the bank number shall be: 1210 (CA).

3. The next 2 numbers shall be 00.","1. The length of the bank account shall not be 22.

2. The first 4 numbers of the bank number shall not be: 1210 (CA).

3. The next 2 numbers shall not be 00.","(assert (= (str.len s) 22))

(assert (= (str.substr s 0 4) ""1210""))

(assert (= (str.substr s 4 2) ""00""))","(assert (not (= (str.len s) 22)))

(assert (not (= (str.substr s 0 4) ""1210"")))

(assert (not (= (str.substr s 4 2) ""00"")))"